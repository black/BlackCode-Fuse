#include <app/-.HashableWeakReference.h>
#include <app/Android.android.view.View.h>
#include <app/Experimental.Cache.DiskCacheEntry.h>
#include <app/Fuse.Animations.Animator.h>
#include <app/Fuse.Animations.IMixerMaster.h>
#include <app/Fuse.Animations.Keyframe.h>
#include <app/Fuse.Animations.MixerHandle__bool.h>
#include <app/Fuse.Animations.MixerHandle__char.h>
#include <app/Fuse.Animations.MixerHandle__double.h>
#include <app/Fuse.Animations.MixerHandle__float.h>
#include <app/Fuse.Animations.MixerHandle__float2.h>
#include <app/Fuse.Animations.MixerHandle__float3.h>
#include <app/Fuse.Animations.MixerHandle__float4.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Animations_AnimationVariant.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Animations_Easing.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Animations_KeyframeInterpolation.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Animations_MixOp.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_BlendMode.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_Brush.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_DynamicBrush.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_GradientStop.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_LinearGradient.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_SolidColor.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Drawing_StaticBrush.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_Alignment.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_CachingMode.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_Element.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_HitTestMode.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_SizeUnit.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_StretchDirection.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_StretchMode.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_StretchSizing.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_TextAlignment.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_TextWrapping.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Elements_Visibility.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Font.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Gestures_Edge.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Gestures_ScrollDirections.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Layouts_Dock.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Layouts_FlowDirection.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Layouts_Metric.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Layouts_Orientation.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Navigation_NavigationDirection.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Navigation_NavigationEdge.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Navigation_NavigationGotoMode.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Navigation_SnapTo.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Navigation_SwipeDirection.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Navigation_SwipeEnds.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Node.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Resources_ImageSource.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Transform.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Triggers_Actions_TriggerDirection.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Triggers_State.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Triggers_StateTransition.h>
#include <app/Fuse.Animations.MixerHandle__Fuse_Triggers_TriggerBypassMode.h>
#include <app/Fuse.Animations.MixerHandle__int.h>
#include <app/Fuse.Animations.MixerHandle__int2.h>
#include <app/Fuse.Animations.MixerHandle__int3.h>
#include <app/Fuse.Animations.MixerHandle__int4.h>
#include <app/Fuse.Animations.MixerHandle__long.h>
#include <app/Fuse.Animations.MixerHandle__object.h>
#include <app/Fuse.Animations.MixerHandle__short.h>
#include <app/Fuse.Animations.MixerHandle__string.h>
#include <app/Fuse.Animations.MixerHandle__Uno_EventArgs.h>
#include <app/Fuse.Animations.MixerHandle__Uno_Platform_iOS_StatusBarStyle.h>
#include <app/Fuse.Animations.MixerHandle__Uno_UX_FileSource.h>
#include <app/Fuse.Behavior.h>
#include <app/Fuse.CacheFramebuffer.h>
#include <app/Fuse.Controls.Control.h>
#include <app/Fuse.Controls.Internal.DefaultTextRenderer_FontKey.h>
#include <app/Fuse.Controls.Internal.WordWrapperWord.h>
#include <app/Fuse.Controls.Internal.WrappedLine.h>
#include <app/Fuse.Controls.TextEdit.LineCacheLine.h>
#include <app/Fuse.Drawing.Batching.Batch.h>
#include <app/Fuse.Drawing.Batching.Entry.h>
#include <app/Fuse.Drawing.Brush.h>
#include <app/Fuse.Drawing.Contour.h>
#include <app/Fuse.Drawing.GradientStop.h>
#include <app/Fuse.Drawing.Internal.MultiBuffer_Field.h>
#include <app/Fuse.Drawing.PathGeometry.h>
#include <app/Fuse.Drawing.Stroke.h>
#include <app/Fuse.Effects.Effect.h>
#include <app/Fuse.Elements.Element.h>
#include <app/Fuse.Elements.ElementAtlas.h>
#include <app/Fuse.Elements.ElementBatch.h>
#include <app/Fuse.Elements.ElementBatchEntry.h>
#include <app/Fuse.Elements.IElementBatchDrawable.h>
#include <app/Fuse.Entities.Component.h>
#include <app/Fuse.Entities.Entity.h>
#include <app/Fuse.Entities.Entry.h>
#include <app/Fuse.Entities.Material.h>
#include <app/Fuse.Entities.Mesh.h>
#include <app/Fuse.Font.h>
#include <app/Fuse.IFlush.h>
#include <app/Fuse.Input.Capturer.h>
#include <app/Fuse.Input.FocusGainedHandler.h>
#include <app/Fuse.Input.FocusLostHandler.h>
#include <app/Fuse.Input.IsFocusableChangedHandler.h>
#include <app/Fuse.Input.KeyPressedHandler.h>
#include <app/Fuse.Input.KeyReleasedHandler.h>
#include <app/Fuse.Input.Pointer_PELHolder.h>
#include <app/Fuse.Input.PointerEnteredHandler.h>
#include <app/Fuse.Input.PointerLeftHandler.h>
#include <app/Fuse.Input.PointerMovedHandler.h>
#include <app/Fuse.Input.PointerPressedHandler.h>
#include <app/Fuse.Input.PointerReleasedHandler.h>
#include <app/Fuse.Input.PointerWheelMovedHandler.h>
#include <app/Fuse.Input.TextEnteredHandler.h>
#include <app/Fuse.iOS.StatusBarConfig.h>
#include <app/Fuse.IViewport.h>
#include <app/Fuse.Layouts.Column.h>
#include <app/Fuse.Layouts.DefinitionBase_ParseDataItem.h>
#include <app/Fuse.Layouts.Row.h>
#include <app/Fuse.Navigation.INavigationAnimator.h>
#include <app/Fuse.Navigation.IPageResourceBinding.h>
#include <app/Fuse.Navigation.NavigationEdge.h>
#include <app/Fuse.Node.h>
#include <app/Fuse.Physics.Body.h>
#include <app/Fuse.Physics.IRule.h>
#include <app/Fuse.Reactive.Case.h>
#include <app/Fuse.Reactive.FuseJS.Timer_Time.h>
#include <app/Fuse.Reactive.JavaScript.h>
#include <app/Fuse.RenderTargetEntry.h>
#include <app/Fuse.Resources.ImageSource.h>
#include <app/Fuse.Resources.IMemoryResource.h>
#include <app/Fuse.Resources.ISoftDisposable.h>
#include <app/Fuse.Scripting.INameListener.h>
#include <app/Fuse.Scripting.NativeMember.h>
#include <app/Fuse.Stage.h>
#include <app/Fuse.Style.h>
#include <app/Fuse.StyleProperty.h>
#include <app/Fuse.Transform.h>
#include <app/Fuse.Triggers.Actions.TriggerAction.h>
#include <app/Fuse.Triggers.State.h>
#include <app/Fuse.UpdateListener.h>
#include <app/OpenGL.GLFramebufferHandle.h>
#include <app/Outracks.Simulator.Bytecode.BindVariable.h>
#include <app/Outracks.Simulator.Bytecode.Expression.h>
#include <app/Outracks.Simulator.Bytecode.Parameter.h>
#include <app/Outracks.Simulator.Bytecode.Statement.h>
#include <app/Outracks.Simulator.Bytecode.TypeName.h>
#include <app/Outracks.Simulator.Bytecode.Variable.h>
#include <app/Outracks.Simulator.Protocol.ExceptionInfo.h>
#include <app/Outracks.Simulator.Protocol.MessageFromClient.h>
#include <app/Outracks.Simulator.Protocol.MessageToClient.h>
#include <app/Outracks.Simulator.Task__Outracks_Simulator_ISimulatorClient.h>
#include <app/Outracks.Simulator.Task__Uno_Net_IPEndPoint__.h>
#include <app/Uno.Action.h>
#include <app/Uno.Action__bool.h>
#include <app/Uno.Action__Fuse_Camera_PictureResult.h>
#include <app/Uno.Action__string.h>
#include <app/Uno.Action__Uno_Exception.h>
#include <app/Uno.ArgumentException.h>
#include <app/Uno.ArgumentNullException.h>
#include <app/Uno.ArgumentOutOfRangeException.h>
#include <app/Uno.Bool.h>
#include <app/Uno.Byte.h>
#include <app/Uno.Byte2.h>
#include <app/Uno.Byte4.h>
#include <app/Uno.Char.h>
#include <app/Uno.CharPunctuationChecker_PunctuationRange.h>
#include <app/Uno.Collections.ConcurrentCollection1_ModItem__Fuse_Animations_-c46c43e5.h>
#include <app/Uno.Collections.ConcurrentCollection1_ModItem__Uno_EventHandler.h>
#include <app/Uno.Collections.Dictionary__Outracks_Simulator_Bytecode_TypeNam-95c49e9b.h>
#include <app/Uno.Collections.List__byte.h>
#include <app/Uno.Comparison__byte.h>
#include <app/Uno.Comparison__byte__.h>
#include <app/Uno.Comparison__char.h>
#include <app/Uno.Comparison__Experimental_Cache_DiskCacheEntry.h>
#include <app/Uno.Comparison__float2.h>
#include <app/Uno.Comparison__float3.h>
#include <app/Uno.Comparison__float4.h>
#include <app/Uno.Comparison__framebuffer.h>
#include <app/Uno.Comparison__Fuse_Animations_Animator.h>
#include <app/Uno.Comparison__Fuse_Animations_IMixerMaster.h>
#include <app/Uno.Comparison__Fuse_Animations_Keyframe.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_bool_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_char_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_double_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_float_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_float2_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_float3_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_float4_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_Ani-36374744.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_Key-4f3927ea.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Element_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Stret-1ab1feff.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Font_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Gestures_Scrol-4c068e9.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_Nav-2509ba94.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_Nav-365c78bb.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_Nav-741b8dd5.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_Swi-e2db51a.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Node_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Transform_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_Actio-8ba5a68d.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_State_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_State-c45805ab.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_Trigg-9ac718fe.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_int_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_int2_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_int3_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_int4_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_long_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_object_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_short_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_string_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Uno_EventArgs_.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Uno_Platform_iOS_St-89edf6a5.h>
#include <app/Uno.Comparison__Fuse_Animations_MixerHandle_Uno_UX_FileSource_.h>
#include <app/Uno.Comparison__Fuse_Behavior.h>
#include <app/Uno.Comparison__Fuse_CacheFramebuffer.h>
#include <app/Uno.Comparison__Fuse_Controls_Control.h>
#include <app/Uno.Comparison__Fuse_Controls_Internal_WordWrapperWord.h>
#include <app/Uno.Comparison__Fuse_Controls_Internal_WrappedLine.h>
#include <app/Uno.Comparison__Fuse_Controls_TextEdit_LineCacheLine.h>
#include <app/Uno.Comparison__Fuse_Drawing_Batching_Batch.h>
#include <app/Uno.Comparison__Fuse_Drawing_Batching_Entry.h>
#include <app/Uno.Comparison__Fuse_Drawing_Brush.h>
#include <app/Uno.Comparison__Fuse_Drawing_Contour.h>
#include <app/Uno.Comparison__Fuse_Drawing_GradientStop.h>
#include <app/Uno.Comparison__Fuse_Drawing_Internal_MultiBuffer_Field.h>
#include <app/Uno.Comparison__Fuse_Drawing_PathGeometry.h>
#include <app/Uno.Comparison__Fuse_Drawing_Stroke.h>
#include <app/Uno.Comparison__Fuse_Effects_Effect.h>
#include <app/Uno.Comparison__Fuse_Elements_Element.h>
#include <app/Uno.Comparison__Fuse_Elements_ElementAtlas.h>
#include <app/Uno.Comparison__Fuse_Elements_ElementBatch.h>
#include <app/Uno.Comparison__Fuse_Elements_ElementBatchEntry.h>
#include <app/Uno.Comparison__Fuse_Elements_IElementBatchDrawable.h>
#include <app/Uno.Comparison__Fuse_Entities_Component.h>
#include <app/Uno.Comparison__Fuse_Entities_Entity.h>
#include <app/Uno.Comparison__Fuse_Entities_Entry.h>
#include <app/Uno.Comparison__Fuse_Input_Capturer.h>
#include <app/Uno.Comparison__Fuse_Input_FocusGainedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_FocusLostHandler.h>
#include <app/Uno.Comparison__Fuse_Input_IsFocusableChangedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_KeyPressedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_KeyReleasedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_Pointer_PELHolder.h>
#include <app/Uno.Comparison__Fuse_Input_PointerEnteredHandler.h>
#include <app/Uno.Comparison__Fuse_Input_PointerLeftHandler.h>
#include <app/Uno.Comparison__Fuse_Input_PointerMovedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_PointerPressedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_PointerReleasedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_PointerWheelMovedHandler.h>
#include <app/Uno.Comparison__Fuse_Input_TextEnteredHandler.h>
#include <app/Uno.Comparison__Fuse_iOS_StatusBarConfig.h>
#include <app/Uno.Comparison__Fuse_IViewport.h>
#include <app/Uno.Comparison__Fuse_Layouts_Column.h>
#include <app/Uno.Comparison__Fuse_Layouts_DefinitionBase_ParseDataItem.h>
#include <app/Uno.Comparison__Fuse_Layouts_Row.h>
#include <app/Uno.Comparison__Fuse_Navigation_INavigationAnimator.h>
#include <app/Uno.Comparison__Fuse_Navigation_IPageResourceBinding.h>
#include <app/Uno.Comparison__Fuse_Node.h>
#include <app/Uno.Comparison__Fuse_Physics_Body.h>
#include <app/Uno.Comparison__Fuse_Physics_IRule.h>
#include <app/Uno.Comparison__Fuse_Reactive_Case.h>
#include <app/Uno.Comparison__Fuse_Reactive_FuseJS_Timer_Time.h>
#include <app/Uno.Comparison__Fuse_Reactive_JavaScript.h>
#include <app/Uno.Comparison__Fuse_RenderTargetEntry.h>
#include <app/Uno.Comparison__Fuse_Resources_ImageSource.h>
#include <app/Uno.Comparison__Fuse_Resources_IMemoryResource.h>
#include <app/Uno.Comparison__Fuse_Resources_ISoftDisposable.h>
#include <app/Uno.Comparison__Fuse_Scripting_INameListener.h>
#include <app/Uno.Comparison__Fuse_Scripting_NativeMember.h>
#include <app/Uno.Comparison__Fuse_Stage.h>
#include <app/Uno.Comparison__Fuse_Style.h>
#include <app/Uno.Comparison__Fuse_StyleProperty.h>
#include <app/Uno.Comparison__Fuse_Transform.h>
#include <app/Uno.Comparison__Fuse_Triggers_Actions_TriggerAction.h>
#include <app/Uno.Comparison__Fuse_Triggers_State.h>
#include <app/Uno.Comparison__Fuse_UpdateListener.h>
#include <app/Uno.Comparison__int.h>
#include <app/Uno.Comparison__int4.h>
#include <app/Uno.Comparison__object.h>
#include <app/Uno.Comparison__Outracks_Simulator_Bytecode_TypeName.h>
#include <app/Uno.Comparison__Outracks_Simulator_Task_Outracks_Simulator_ISim-5c8678bc.h>
#include <app/Uno.Comparison__Outracks_Simulator_Task_Uno_Net_IPEndPoint___.h>
#include <app/Uno.Comparison__string.h>
#include <app/Uno.Comparison__Uno_Action.h>
#include <app/Uno.Comparison__Uno_CharPunctuationChecker_PunctuationRange.h>
#include <app/Uno.Comparison__Uno_Collections_ConcurrentCollection1_ModItem_F-ca8335e0.h>
#include <app/Uno.Comparison__Uno_Collections_ConcurrentCollection1_ModItem_U-ce2bbf10.h>
#include <app/Uno.Comparison__Uno_Collections_Dictionary_Outracks_Simulator_B-27e7052a.h>
#include <app/Uno.Comparison__Uno_Content_Models_ModelDrawable.h>
#include <app/Uno.Comparison__Uno_Content_Models_ModelNode.h>
#include <app/Uno.Comparison__Uno_Content_Models_ModelParameter_float4x4_.h>
#include <app/Uno.Comparison__Uno_Content_Models_ModelSkin.h>
#include <app/Uno.Comparison__Uno_Content_Models_SkinBone.h>
#include <app/Uno.Comparison__Uno_Content_Models_SkinDrawable.h>
#include <app/Uno.Comparison__Uno_Content_Models_VertexInfluence.h>
#include <app/Uno.Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float_float_.h>
#include <app/Uno.Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_.h>
#include <app/Uno.Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_.h>
#include <app/Uno.Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_.h>
#include <app/Uno.Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float4-5d40e99c.h>
#include <app/Uno.Comparison__Uno_Data_Json_Value.h>
#include <app/Uno.Comparison__Uno_Data_Xml_XmlAttribute.h>
#include <app/Uno.Comparison__Uno_Data_Xml_XmlAttributeHandle.h>
#include <app/Uno.Comparison__Uno_Data_Xml_XmlLinkedNode.h>
#include <app/Uno.Comparison__Uno_Data_Xml_XmlNodeHandle.h>
#include <app/Uno.Comparison__Uno_Diagnostics_ProfileEvent.h>
#include <app/Uno.Comparison__Uno_EventHandler.h>
#include <app/Uno.Comparison__Uno_Exception.h>
#include <app/Uno.Comparison__Uno_Graphics_PolygonFace.h>
#include <app/Uno.Comparison__Uno_Net_Http_HttpMessageHandlerRequest.h>
#include <app/Uno.Comparison__Uno_Platform_Key.h>
#include <app/Uno.Comparison__Uno_Reflection_CppField.h>
#include <app/Uno.Comparison__Uno_Reflection_CppFunction.h>
#include <app/Uno.Comparison__Uno_Runtime_Implementation_Internal_FormatStringToken.h>
#include <app/Uno.Comparison__Uno_UX_FileSource.h>
#include <app/Uno.Comparison__Uno_UX_IFactory.h>
#include <app/Uno.Comparison__Uno_UX_ITemplate.h>
#include <app/Uno.Comparison__Uno_UX_Resource.h>
#include <app/Uno.Content.Fonts.BitmapFont_CharPair.h>
#include <app/Uno.Content.Models.ModelDrawable.h>
#include <app/Uno.Content.Models.ModelNode.h>
#include <app/Uno.Content.Models.ModelParameter__float4x4.h>
#include <app/Uno.Content.Models.ModelSkin.h>
#include <app/Uno.Content.Models.SkinBone.h>
#include <app/Uno.Content.Models.SkinDrawable.h>
#include <app/Uno.Content.Models.VertexInfluence.h>
#include <app/Uno.Content.Splines.KeyframedSpline2_Key__float__float.h>
#include <app/Uno.Content.Splines.KeyframedSpline2_Key__float2__float2.h>
#include <app/Uno.Content.Splines.KeyframedSpline2_Key__float3__float3.h>
#include <app/Uno.Content.Splines.KeyframedSpline2_Key__float4__float4.h>
#include <app/Uno.Content.Splines.KeyframedSpline2_Key__float4x4__float4x4.h>
#include <app/Uno.Data.Json.Value.h>
#include <app/Uno.Data.Xml.XmlAttribute.h>
#include <app/Uno.Data.Xml.XmlAttributeHandle.h>
#include <app/Uno.Data.Xml.XmlLinkedNode.h>
#include <app/Uno.Data.Xml.XmlNodeHandle.h>
#include <app/Uno.Delegate.h>
#include <app/Uno.Diagnostics.DebugMessageType.h>
#include <app/Uno.Diagnostics.ProfileEvent.h>
#include <app/Uno.Double.h>
#include <app/Uno.EventHandler.h>
#include <app/Uno.EventHandler__Uno_Platform_SystemUIWillResizeEventArgs.h>
#include <app/Uno.Exception.h>
#include <app/Uno.Float.h>
#include <app/Uno.Float2.h>
#include <app/Uno.Float2x2.h>
#include <app/Uno.Float3.h>
#include <app/Uno.Float3x3.h>
#include <app/Uno.Float4.h>
#include <app/Uno.Float4x4.h>
#include <app/Uno.Graphics.Framebuffer.h>
#include <app/Uno.Graphics.PolygonFace.h>
#include <app/Uno.Int.h>
#include <app/Uno.Int2.h>
#include <app/Uno.Int3.h>
#include <app/Uno.Int4.h>
#include <app/Uno.IntPtr.h>
#include <app/Uno.InvalidOperationException.h>
#include <app/Uno.Long.h>
#include <app/Uno.Net.Http.HttpMessageHandlerRequest.h>
#include <app/Uno.Object.h>
#include <app/Uno.Platform.Key.h>
#include <app/Uno.Platform.MouseButton.h>
#include <app/Uno.Platform.PointerCursor.h>
#include <app/Uno.Platform.SystemUI.h>
#include <app/Uno.Platform.SystemUIResizeReason.h>
#include <app/Uno.Platform.SystemUIWillResizeEventArgs.h>
#include <app/Uno.Platform2.Display.h>
#include <app/Uno.Rect.h>
#include <app/Uno.Recti.h>
#include <app/Uno.Reflection.CppField.h>
#include <app/Uno.Reflection.CppFunction.h>
#include <app/Uno.Runtime.Implementation.ArrayCopyImpl.h>
#include <app/Uno.Runtime.Implementation.ArraySortImpl.h>
#include <app/Uno.Runtime.Implementation.BufferImpl.h>
#include <app/Uno.Runtime.Implementation.ClockImpl.h>
#include <app/Uno.Runtime.Implementation.DebugImpl.h>
#include <app/Uno.Runtime.Implementation.DirectBuffer.h>
#include <app/Uno.Runtime.Implementation.GenericEqualsImpl.h>
#include <app/Uno.Runtime.Implementation.GraphicsContextHandle.h>
#include <app/Uno.Runtime.Implementation.GraphicsContextImpl.h>
#include <app/Uno.Runtime.Implementation.Internal.FormatStringToken.h>
#include <app/Uno.Runtime.Implementation.PlatformWindowHandle.h>
#include <app/Uno.Runtime.Implementation.PlatformWindowImpl.h>
#include <app/Uno.Runtime.Implementation.ProfileImpl.h>
#include <app/Uno.Runtime.Implementation.TextEncodingImpl.h>
#include <app/Uno.SByte2.h>
#include <app/Uno.SByte4.h>
#include <app/Uno.Short.h>
#include <app/Uno.Short2.h>
#include <app/Uno.Short4.h>
#include <app/Uno.String.h>
#include <app/Uno.Threading.Promise__bool.h>
#include <app/Uno.Threading.Promise__Fuse_Camera_PictureResult.h>
#include <app/Uno.Threading.Promise__string.h>
#include <app/Uno.Type.h>
#include <app/Uno.UInt.h>
#include <app/Uno.ULong.h>
#include <app/Uno.UShort.h>
#include <app/Uno.UShort2.h>
#include <app/Uno.UShort4.h>
#include <app/Uno.UX.FileSource.h>
#include <app/Uno.UX.IFactory.h>
#include <app/Uno.UX.ITemplate.h>
#include <app/Uno.UX.Resource.h>
#include <time.h>
#include <Uno/Base64.h>
#include <Uno/Support.h>
#include <Uno/XliInterop.h>
#include <Xli.h>
#include <Xli/Console.h>
#include <Xli/DateTime.h>
#include <Xli/Path.h>
#include <Xli/Time.h>
#include <XliPlatform/Disk.h>
#include <XliPlatform/Display.h>
extern ::Xli::Window* uXliWindowPtr;

namespace app {
namespace Uno {
namespace Runtime {
namespace Implementation {

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

ArrayCopyImpl__uType* ArrayCopyImpl__typeof()
{
    static ::uStaticStrong<ArrayCopyImpl__uType*> type;
    if (type != NULL) return type;

    type = (ArrayCopyImpl__uType*)::uAllocClassType(sizeof(ArrayCopyImpl__uType), "Uno.Runtime.Implementation.ArrayCopyImpl");

    type->SetFunctions(20,
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__byte, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__char, 0, true, ::uGetArrayType(::app::Uno::Char__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Char__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_BindVariable, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::BindVariable__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::BindVariable__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_Expression, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Expression__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Expression__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_Parameter, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Parameter__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Parameter__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_Statement, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Statement__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Statement__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_TypeName, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::TypeName__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::TypeName__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Outracks_Simulator_Protocol_ExceptionInfo, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Protocol::ExceptionInfo__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Protocol::ExceptionInfo__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__string, 0, true, ::uGetArrayType(::app::Uno::String__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::String__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("Copy", ArrayCopyImpl__Copy__Uno_Exception, 0, true, ::uGetArrayType(::app::Uno::Exception__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Exception__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__byte, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__char, 0, true, ::uGetArrayType(::app::Uno::Char__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Char__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_BindVariable, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::BindVariable__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::BindVariable__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Expression, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Expression__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Expression__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Parameter, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Parameter__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Parameter__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Statement, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Statement__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::Statement__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_TypeName, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::TypeName__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Bytecode::TypeName__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Protocol_ExceptionInfo, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Protocol::ExceptionInfo__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Outracks::Simulator::Protocol::ExceptionInfo__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__string, 0, true, ::uGetArrayType(::app::Uno::String__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::String__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunctionVoid("ValidateArguments", ArrayCopyImpl__ValidateArguments__Uno_Exception, 0, true, ::uGetArrayType(::app::Uno::Exception__typeof()), ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Exception__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()));

    ::uRegisterType(type);
    return type;
}

void ArrayCopyImpl__Copy__byte(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__byte(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->Item< ::uByte>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::uByte>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__char(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__char(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->Item< ::uChar>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::uChar>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_BindVariable(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_BindVariable(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Outracks::Simulator::Bytecode::BindVariable*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Outracks::Simulator::Bytecode::BindVariable*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_Expression(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Expression(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Outracks::Simulator::Bytecode::Expression*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Outracks::Simulator::Bytecode::Expression*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_Parameter(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Parameter(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Outracks::Simulator::Bytecode::Parameter*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Outracks::Simulator::Bytecode::Parameter*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_Statement(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Statement(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Outracks::Simulator::Bytecode::Statement*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Outracks::Simulator::Bytecode::Statement*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_TypeName(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Outracks::Simulator::Bytecode::TypeName*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Outracks_Simulator_Protocol_ExceptionInfo(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Protocol_ExceptionInfo(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Outracks::Simulator::Protocol::ExceptionInfo*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Outracks::Simulator::Protocol::ExceptionInfo*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__string(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__string(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::uString*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::uString*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__Copy__Uno_Exception(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    ArrayCopyImpl__ValidateArguments__Uno_Exception(NULL, sourceArray, sourceIndex, destinationArray, destinationIndex, length);

    for (int i = 0; i < length; i++)
    {
        ::uPtr< ::uArray*>(destinationArray)->ItemStrong< ::app::Uno::Exception*>(destinationIndex + i) = ::uPtr< ::uArray*>(sourceArray)->Item< ::app::Uno::Exception*>(sourceIndex + i);
    }
}

void ArrayCopyImpl__ValidateArguments__byte(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__char(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_BindVariable(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Expression(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Parameter(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_Statement(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Outracks_Simulator_Protocol_ExceptionInfo(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__string(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

void ArrayCopyImpl__ValidateArguments__Uno_Exception(::uStatic* __this, ::uArray* sourceArray, int sourceIndex, ::uArray* destinationArray, int destinationIndex, int length)
{
    if (sourceArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("sourceArray")));
    }

    if (destinationArray == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("destinationArray")));
    }

    if (sourceIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("sourceIndex")));
    }

    if (destinationIndex < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("destinationIndex")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(sourceArray)->Length() < (sourceIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::app::Uno::String__op_Addition_2(NULL, ::app::Uno::String__op_Addition_1(NULL, ::uGetConstString("Destination array was not long enough. Check destinationIndex and length, and the array's lower bounds."), ::uBox< int>(::app::Uno::Int__typeof(), ::uPtr< ::uArray*>(sourceArray)->Length())), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), destinationIndex)), ::uGetConstString(", ")), ::uBox< int>(::app::Uno::Int__typeof(), length))));
    }

    if (::uPtr< ::uArray*>(destinationArray)->Length() < (destinationIndex + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Source array was not long enough. Check sourceIndex and length, and the array's lower bounds.")));
    }
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

ArraySortImpl__uType* ArraySortImpl__typeof()
{
    static ::uStaticStrong<ArraySortImpl__uType*> type;
    if (type != NULL) return type;

    type = (ArraySortImpl__uType*)::uAllocClassType(sizeof(ArraySortImpl__uType), "Uno.Runtime.Implementation.ArraySortImpl");

    type->SetFunctions(176,
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__byte, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__byte__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__byte__, 0, true, ::uGetArrayType(::uGetArrayType(::app::Uno::Byte__typeof())), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__byte____typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__char, 0, true, ::uGetArrayType(::app::Uno::Char__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__char__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Experimental_Cache_DiskCacheEntry, 0, true, ::uGetArrayType(::app::Experimental::Cache::DiskCacheEntry__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Experimental_Cache_DiskCacheEntry__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__float2, 0, true, ::uGetArrayType(::app::Uno::Float2__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__float2__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__float3, 0, true, ::uGetArrayType(::app::Uno::Float3__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__float3__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__float4, 0, true, ::uGetArrayType(::app::Uno::Float4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__float4__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__framebuffer, 0, true, ::uGetArrayType(::app::Uno::Graphics::Framebuffer__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__framebuffer__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_Animator, 0, true, ::uGetArrayType(::app::Fuse::Animations::Animator__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_Animator__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_IMixerMaster, 0, true, ::uGetArrayType(::app::Fuse::Animations::IMixerMaster__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_IMixerMaster__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_Keyframe, 0, true, ::uGetArrayType(::app::Fuse::Animations::Keyframe__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_Keyframe__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_bool_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__bool__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_bool___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_char_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__char__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_char___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_double_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__double__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_double___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__float__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_float___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float2_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__float2__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_float2___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float3_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__float3__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_float3___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float4_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__float4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_float4___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_Easing___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_Element_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Element___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Font_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Font__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Font___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Node_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Node__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Node___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Transform_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Transform__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Transform___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_State_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_State___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__int__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_int___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int2_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__int2__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_int2___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int3_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__int3__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_int3___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int4_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__int4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_int4___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_long_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__long__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_long___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_object_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__object__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_object___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_short_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__short__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_short___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_string_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__string__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_string___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Uno_EventArgs_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Uno_EventArgs__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Uno_EventArgs___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Uno_UX_FileSource_, 0, true, ::uGetArrayType(::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Animations_MixerHandle_Uno_UX_FileSource___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Behavior, 0, true, ::uGetArrayType(::app::Fuse::Behavior__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Behavior__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_CacheFramebuffer, 0, true, ::uGetArrayType(::app::Fuse::CacheFramebuffer__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_CacheFramebuffer__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Controls_Control, 0, true, ::uGetArrayType(::app::Fuse::Controls::Control__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Controls_Control__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Controls_Internal_WordWrapperWord, 0, true, ::uGetArrayType(::app::Fuse::Controls::Internal::WordWrapperWord__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Controls_Internal_WordWrapperWord__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Controls_Internal_WrappedLine, 0, true, ::uGetArrayType(::app::Fuse::Controls::Internal::WrappedLine__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Controls_Internal_WrappedLine__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Controls_TextEdit_LineCacheLine, 0, true, ::uGetArrayType(::app::Fuse::Controls::TextEdit::LineCacheLine__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Controls_TextEdit_LineCacheLine__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_Batching_Batch, 0, true, ::uGetArrayType(::app::Fuse::Drawing::Batching::Batch__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_Batching_Batch__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_Batching_Entry, 0, true, ::uGetArrayType(::app::Fuse::Drawing::Batching::Entry__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_Batching_Entry__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_Brush, 0, true, ::uGetArrayType(::app::Fuse::Drawing::Brush__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_Brush__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_Contour, 0, true, ::uGetArrayType(::app::Fuse::Drawing::Contour__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_Contour__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_GradientStop, 0, true, ::uGetArrayType(::app::Fuse::Drawing::GradientStop__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_GradientStop__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_Internal_MultiBuffer_Field, 0, true, ::uGetArrayType(::app::Fuse::Drawing::Internal::MultiBuffer_Field__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_Internal_MultiBuffer_Field__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_PathGeometry, 0, true, ::uGetArrayType(::app::Fuse::Drawing::PathGeometry__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_PathGeometry__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Drawing_Stroke, 0, true, ::uGetArrayType(::app::Fuse::Drawing::Stroke__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Drawing_Stroke__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Effects_Effect, 0, true, ::uGetArrayType(::app::Fuse::Effects::Effect__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Effects_Effect__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Elements_Element, 0, true, ::uGetArrayType(::app::Fuse::Elements::Element__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Elements_Element__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Elements_ElementAtlas, 0, true, ::uGetArrayType(::app::Fuse::Elements::ElementAtlas__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Elements_ElementAtlas__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Elements_ElementBatch, 0, true, ::uGetArrayType(::app::Fuse::Elements::ElementBatch__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Elements_ElementBatch__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Elements_ElementBatchEntry, 0, true, ::uGetArrayType(::app::Fuse::Elements::ElementBatchEntry__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Elements_ElementBatchEntry__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Elements_IElementBatchDrawable, 0, true, ::uGetArrayType(::app::Fuse::Elements::IElementBatchDrawable__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Elements_IElementBatchDrawable__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Entities_Component, 0, true, ::uGetArrayType(::app::Fuse::Entities::Component__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Entities_Component__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Entities_Entity, 0, true, ::uGetArrayType(::app::Fuse::Entities::Entity__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Entities_Entity__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Entities_Entry, 0, true, ::uGetArrayType(::app::Fuse::Entities::Entry__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Entities_Entry__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_Capturer, 0, true, ::uGetArrayType(::app::Fuse::Input::Capturer__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_Capturer__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_FocusGainedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::FocusGainedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_FocusGainedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_FocusLostHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::FocusLostHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_FocusLostHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_IsFocusableChangedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::IsFocusableChangedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_IsFocusableChangedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_KeyPressedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::KeyPressedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_KeyPressedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_KeyReleasedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::KeyReleasedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_KeyReleasedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_Pointer_PELHolder, 0, true, ::uGetArrayType(::app::Fuse::Input::Pointer_PELHolder__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_Pointer_PELHolder__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_PointerEnteredHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::PointerEnteredHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_PointerEnteredHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_PointerLeftHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::PointerLeftHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_PointerLeftHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_PointerMovedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::PointerMovedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_PointerMovedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_PointerPressedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::PointerPressedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_PointerPressedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_PointerReleasedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::PointerReleasedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_PointerReleasedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_PointerWheelMovedHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::PointerWheelMovedHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_PointerWheelMovedHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Input_TextEnteredHandler, 0, true, ::uGetArrayType(::app::Fuse::Input::TextEnteredHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Input_TextEnteredHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_iOS_StatusBarConfig, 0, true, ::uGetArrayType(::app::Fuse::iOS::StatusBarConfig__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_iOS_StatusBarConfig__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_IViewport, 0, true, ::uGetArrayType(::app::Fuse::IViewport__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_IViewport__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Layouts_Column, 0, true, ::uGetArrayType(::app::Fuse::Layouts::Column__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Layouts_Column__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Layouts_DefinitionBase_ParseDataItem, 0, true, ::uGetArrayType(::app::Fuse::Layouts::DefinitionBase_ParseDataItem__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Layouts_DefinitionBase_ParseDataItem__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Layouts_Row, 0, true, ::uGetArrayType(::app::Fuse::Layouts::Row__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Layouts_Row__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Navigation_INavigationAnimator, 0, true, ::uGetArrayType(::app::Fuse::Navigation::INavigationAnimator__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Navigation_INavigationAnimator__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Navigation_IPageResourceBinding, 0, true, ::uGetArrayType(::app::Fuse::Navigation::IPageResourceBinding__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Navigation_IPageResourceBinding__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Node, 0, true, ::uGetArrayType(::app::Fuse::Node__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Node__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Physics_Body, 0, true, ::uGetArrayType(::app::Fuse::Physics::Body__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Physics_Body__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Physics_IRule, 0, true, ::uGetArrayType(::app::Fuse::Physics::IRule__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Physics_IRule__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Reactive_Case, 0, true, ::uGetArrayType(::app::Fuse::Reactive::Case__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Reactive_Case__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Reactive_FuseJS_Timer_Time, 0, true, ::uGetArrayType(::app::Fuse::Reactive::FuseJS::Timer_Time__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Reactive_FuseJS_Timer_Time__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Reactive_JavaScript, 0, true, ::uGetArrayType(::app::Fuse::Reactive::JavaScript__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Reactive_JavaScript__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_RenderTargetEntry, 0, true, ::uGetArrayType(::app::Fuse::RenderTargetEntry__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_RenderTargetEntry__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Resources_ImageSource, 0, true, ::uGetArrayType(::app::Fuse::Resources::ImageSource__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Resources_ImageSource__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Resources_IMemoryResource, 0, true, ::uGetArrayType(::app::Fuse::Resources::IMemoryResource__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Resources_IMemoryResource__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Resources_ISoftDisposable, 0, true, ::uGetArrayType(::app::Fuse::Resources::ISoftDisposable__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Resources_ISoftDisposable__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Scripting_INameListener, 0, true, ::uGetArrayType(::app::Fuse::Scripting::INameListener__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Scripting_INameListener__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Scripting_NativeMember, 0, true, ::uGetArrayType(::app::Fuse::Scripting::NativeMember__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Scripting_NativeMember__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Stage, 0, true, ::uGetArrayType(::app::Fuse::Stage__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Stage__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Style, 0, true, ::uGetArrayType(::app::Fuse::Style__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Style__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_StyleProperty, 0, true, ::uGetArrayType(::app::Fuse::StyleProperty__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_StyleProperty__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Transform, 0, true, ::uGetArrayType(::app::Fuse::Transform__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Transform__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Triggers_Actions_TriggerAction, 0, true, ::uGetArrayType(::app::Fuse::Triggers::Actions::TriggerAction__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Triggers_Actions_TriggerAction__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_Triggers_State, 0, true, ::uGetArrayType(::app::Fuse::Triggers::State__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_Triggers_State__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Fuse_UpdateListener, 0, true, ::uGetArrayType(::app::Fuse::UpdateListener__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Fuse_UpdateListener__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__int, 0, true, ::uGetArrayType(::app::Uno::Int__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__int__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__int4, 0, true, ::uGetArrayType(::app::Uno::Int4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__int4__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__object, 0, true, ::uGetArrayType(::uObject__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__object__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Outracks_Simulator_Bytecode_TypeName, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Bytecode::TypeName__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Outracks_Simulator_Bytecode_TypeName__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Outracks_Simulator_Task_Uno_Net_IPEndPoint___, 0, true, ::uGetArrayType(::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint____typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Outracks_Simulator_Task_Uno_Net_IPEndPoint_____typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__string, 0, true, ::uGetArrayType(::app::Uno::String__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__string__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Action, 0, true, ::uGetArrayType(::app::Uno::Action__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Action__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_CharPunctuationChecker_PunctuationRange, 0, true, ::uGetArrayType(::app::Uno::CharPunctuationChecker_PunctuationRange__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_CharPunctuationChecker_PunctuationRange__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_, 0, true, ::uGetArrayType(::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_, 0, true, ::uGetArrayType(::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_, 0, true, ::uGetArrayType(::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_ModelDrawable, 0, true, ::uGetArrayType(::app::Uno::Content::Models::ModelDrawable__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_ModelDrawable__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_ModelNode, 0, true, ::uGetArrayType(::app::Uno::Content::Models::ModelNode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_ModelNode__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_ModelParameter_float4x4_, 0, true, ::uGetArrayType(::app::Uno::Content::Models::ModelParameter__float4x4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_ModelParameter_float4x4___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_ModelSkin, 0, true, ::uGetArrayType(::app::Uno::Content::Models::ModelSkin__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_ModelSkin__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_SkinBone, 0, true, ::uGetArrayType(::app::Uno::Content::Models::SkinBone__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_SkinBone__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_SkinDrawable, 0, true, ::uGetArrayType(::app::Uno::Content::Models::SkinDrawable__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_SkinDrawable__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Models_VertexInfluence, 0, true, ::uGetArrayType(::app::Uno::Content::Models::VertexInfluence__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Models_VertexInfluence__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float_float_, 0, true, ::uGetArrayType(::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float_float___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_, 0, true, ::uGetArrayType(::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_, 0, true, ::uGetArrayType(::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_, 0, true, ::uGetArrayType(::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_, 0, true, ::uGetArrayType(::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4___typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Data_Json_Value, 0, true, ::uGetArrayType(::app::Uno::Data::Json::Value__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Data_Json_Value__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Data_Xml_XmlAttribute, 0, true, ::uGetArrayType(::app::Uno::Data::Xml::XmlAttribute__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Data_Xml_XmlAttribute__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Data_Xml_XmlAttributeHandle, 0, true, ::uGetArrayType(::app::Uno::Data::Xml::XmlAttributeHandle__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Data_Xml_XmlAttributeHandle__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Data_Xml_XmlLinkedNode, 0, true, ::uGetArrayType(::app::Uno::Data::Xml::XmlLinkedNode__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Data_Xml_XmlLinkedNode__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Data_Xml_XmlNodeHandle, 0, true, ::uGetArrayType(::app::Uno::Data::Xml::XmlNodeHandle__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Data_Xml_XmlNodeHandle__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Diagnostics_ProfileEvent, 0, true, ::uGetArrayType(::app::Uno::Diagnostics::ProfileEvent__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Diagnostics_ProfileEvent__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_EventHandler, 0, true, ::uGetArrayType(::app::Uno::EventHandler__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_EventHandler__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Exception, 0, true, ::uGetArrayType(::app::Uno::Exception__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Exception__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Graphics_PolygonFace, 0, true, ::uGetArrayType(::app::Uno::Graphics::PolygonFace__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Graphics_PolygonFace__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Net_Http_HttpMessageHandlerRequest, 0, true, ::uGetArrayType(::app::Uno::Net::Http::HttpMessageHandlerRequest__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Net_Http_HttpMessageHandlerRequest__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Platform_Key, 0, true, ::uGetArrayType(::app::Uno::Platform::Key__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Platform_Key__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Reflection_CppField, 0, true, ::uGetArrayType(::app::Uno::Reflection::CppField__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Reflection_CppField__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Reflection_CppFunction, 0, true, ::uGetArrayType(::app::Uno::Reflection::CppFunction__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Reflection_CppFunction__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_Runtime_Implementation_Internal_FormatStringToken, 0, true, ::uGetArrayType(::app::Uno::Runtime::Implementation::Internal::FormatStringToken__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_Runtime_Implementation_Internal_FormatStringToken__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_UX_FileSource, 0, true, ::uGetArrayType(::app::Uno::UX::FileSource__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_UX_FileSource__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_UX_IFactory, 0, true, ::uGetArrayType(::app::Uno::UX::IFactory__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_UX_IFactory__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_UX_ITemplate, 0, true, ::uGetArrayType(::app::Uno::UX::ITemplate__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_UX_ITemplate__typeof()),
        ::uNewFunctionVoid("Sort", ArraySortImpl__Sort__Uno_UX_Resource, 0, true, ::uGetArrayType(::app::Uno::UX::Resource__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Comparison__Uno_UX_Resource__typeof()));

    ::uRegisterType(type);
    return type;
}

void ArraySortImpl__QuickSortInternal__byte(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uByte pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uByte>(pivotIndex);
        ArraySortImpl__SwapInternal__byte(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uByte, ::uByte>(::uPtr< ::uArray*>(data)->Item< ::uByte>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__byte(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__byte(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__byte(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__byte(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__byte__(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uArray* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uArray*>(pivotIndex);
        ArraySortImpl__SwapInternal__byte__(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uArray*, ::uArray*>(::uPtr< ::uArray*>(data)->Item< ::uArray*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__byte__(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__byte__(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__byte__(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__byte__(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__char(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uChar pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uChar>(pivotIndex);
        ArraySortImpl__SwapInternal__char(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uChar, ::uChar>(::uPtr< ::uArray*>(data)->Item< ::uChar>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__char(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__char(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__char(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__char(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Experimental_Cache_DiskCacheEntry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Experimental::Cache::DiskCacheEntry* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Experimental::Cache::DiskCacheEntry*>(pivotIndex);
        ArraySortImpl__SwapInternal__Experimental_Cache_DiskCacheEntry(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Experimental::Cache::DiskCacheEntry*, ::app::Experimental::Cache::DiskCacheEntry*>(::uPtr< ::uArray*>(data)->Item< ::app::Experimental::Cache::DiskCacheEntry*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Experimental_Cache_DiskCacheEntry(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Experimental_Cache_DiskCacheEntry(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Experimental_Cache_DiskCacheEntry(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Experimental_Cache_DiskCacheEntry(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__float2(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Float2 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float2>(pivotIndex);
        ArraySortImpl__SwapInternal__float2(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Float2, ::app::Uno::Float2>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float2>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__float2(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__float2(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__float2(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__float2(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__float3(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Float3 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float3>(pivotIndex);
        ArraySortImpl__SwapInternal__float3(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Float3, ::app::Uno::Float3>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float3>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__float3(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__float3(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__float3(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__float3(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__float4(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Float4 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float4>(pivotIndex);
        ArraySortImpl__SwapInternal__float4(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Float4, ::app::Uno::Float4>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float4>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__float4(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__float4(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__float4(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__float4(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__framebuffer(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Graphics::Framebuffer* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Graphics::Framebuffer*>(pivotIndex);
        ArraySortImpl__SwapInternal__framebuffer(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Graphics::Framebuffer*, ::app::Uno::Graphics::Framebuffer*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Graphics::Framebuffer*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__framebuffer(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__framebuffer(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__framebuffer(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__framebuffer(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_Animator(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::Animator* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Animator*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_Animator(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::Animator*, ::app::Fuse::Animations::Animator*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Animator*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_Animator(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_Animator(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_Animator(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_Animator(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_IMixerMaster(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_IMixerMaster(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_IMixerMaster(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_IMixerMaster(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_IMixerMaster(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_IMixerMaster(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_Keyframe(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::Keyframe* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Keyframe*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_Keyframe(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::Keyframe*, ::app::Fuse::Animations::Keyframe*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Keyframe*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_Keyframe(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_Keyframe(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_Keyframe(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_Keyframe(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_bool_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__bool* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__bool*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_bool_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__bool*, ::app::Fuse::Animations::MixerHandle__bool*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__bool*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_bool_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_bool_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_bool_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_bool_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_char_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__char* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__char*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_char_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__char*, ::app::Fuse::Animations::MixerHandle__char*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__char*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_char_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_char_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_char_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_char_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_double_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__double* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__double*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_double_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__double*, ::app::Fuse::Animations::MixerHandle__double*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__double*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_double_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_double_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_double_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_double_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__float* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float*, ::app::Fuse::Animations::MixerHandle__float*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float2_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__float2* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float2*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float2_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float2*, ::app::Fuse::Animations::MixerHandle__float2*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float2*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float2_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float2_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float2_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float2_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float3_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__float3* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float3*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float3_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float3*, ::app::Fuse::Animations::MixerHandle__float3*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float3*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float3_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float3_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float3_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float3_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__float4* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float4*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float4_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float4*, ::app::Fuse::Animations::MixerHandle__float4*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float4*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float4_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float4_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float4_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float4_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Font_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Font* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Font*, ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Node_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Node* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Node*, ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*, ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Transform* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Transform*, ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__int* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int*, ::app::Fuse::Animations::MixerHandle__int*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int2_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__int2* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int2*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int2_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int2*, ::app::Fuse::Animations::MixerHandle__int2*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int2*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int2_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int2_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int2_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int2_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int3_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__int3* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int3*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int3_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int3*, ::app::Fuse::Animations::MixerHandle__int3*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int3*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int3_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int3_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int3_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int3_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__int4* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int4*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int4_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int4*, ::app::Fuse::Animations::MixerHandle__int4*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int4*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int4_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int4_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int4_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int4_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_long_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__long* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__long*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_long_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__long*, ::app::Fuse::Animations::MixerHandle__long*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__long*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_long_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_long_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_long_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_long_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_object_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__object* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__object*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_object_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__object*, ::app::Fuse::Animations::MixerHandle__object*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__object*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_object_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_object_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_object_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_object_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_short_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__short* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__short*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_short_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__short*, ::app::Fuse::Animations::MixerHandle__short*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__short*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_short_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_short_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_short_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_short_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_string_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__string* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__string*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_string_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__string*, ::app::Fuse::Animations::MixerHandle__string*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__string*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_string_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_string_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_string_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_string_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Uno_EventArgs* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*, ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*, ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*, ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Behavior(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Behavior* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Behavior*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Behavior(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Behavior*, ::app::Fuse::Behavior*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Behavior*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Behavior(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Behavior(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Behavior(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Behavior(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_CacheFramebuffer(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::CacheFramebuffer* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::CacheFramebuffer*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_CacheFramebuffer(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::CacheFramebuffer*, ::app::Fuse::CacheFramebuffer*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::CacheFramebuffer*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_CacheFramebuffer(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_CacheFramebuffer(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_CacheFramebuffer(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_CacheFramebuffer(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Controls_Control(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Controls::Control* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Control*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Controls_Control(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::Control*, ::app::Fuse::Controls::Control*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Control*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_Control(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Controls_Control(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Control(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Control(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WordWrapperWord(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Controls::Internal::WordWrapperWord* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WordWrapperWord*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::Internal::WordWrapperWord*, ::app::Fuse::Controls::Internal::WordWrapperWord*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WordWrapperWord*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WrappedLine(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Controls::Internal::WrappedLine* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WrappedLine*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WrappedLine(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::Internal::WrappedLine*, ::app::Fuse::Controls::Internal::WrappedLine*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WrappedLine*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WrappedLine(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WrappedLine(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WrappedLine(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WrappedLine(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Controls_TextEdit_LineCacheLine(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Controls::TextEdit::LineCacheLine* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::TextEdit::LineCacheLine*, ::app::Fuse::Controls::TextEdit::LineCacheLine*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Batch(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::Batching::Batch* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Batch*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Batch(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Batching::Batch*, ::app::Fuse::Drawing::Batching::Batch*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Batch*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Batch(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Batch(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Batch(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Batch(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Entry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::Batching::Entry* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Entry*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Entry(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Batching::Entry*, ::app::Fuse::Drawing::Batching::Entry*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Entry*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Entry(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Entry(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Entry(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Entry(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_Brush(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::Brush* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Brush*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_Brush(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Brush*, ::app::Fuse::Drawing::Brush*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Brush*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Brush(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_Brush(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Brush(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Brush(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_Contour(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::Contour* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Contour*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_Contour(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Contour*, ::app::Fuse::Drawing::Contour*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Contour*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Contour(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_Contour(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Contour(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Contour(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_GradientStop(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::GradientStop* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::GradientStop*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_GradientStop(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::GradientStop*, ::app::Fuse::Drawing::GradientStop*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::GradientStop*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_GradientStop(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_GradientStop(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_GradientStop(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_GradientStop(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_Internal_MultiBuffer_Field(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::Internal::MultiBuffer_Field* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Internal::MultiBuffer_Field*, ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_PathGeometry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::PathGeometry* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::PathGeometry*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_PathGeometry(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::PathGeometry*, ::app::Fuse::Drawing::PathGeometry*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::PathGeometry*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_PathGeometry(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_PathGeometry(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_PathGeometry(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_PathGeometry(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Drawing_Stroke(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Drawing::Stroke* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Stroke*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Drawing_Stroke(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Stroke*, ::app::Fuse::Drawing::Stroke*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Stroke*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Stroke(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Drawing_Stroke(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Stroke(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Stroke(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Effects_Effect(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Effects::Effect* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Effects::Effect*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Effects_Effect(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Effects::Effect*, ::app::Fuse::Effects::Effect*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Effects::Effect*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Effects_Effect(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Effects_Effect(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Effects_Effect(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Effects_Effect(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Elements_Element(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Elements::Element* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::Element*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Elements_Element(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::Element*, ::app::Fuse::Elements::Element*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::Element*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_Element(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Elements_Element(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_Element(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_Element(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementAtlas(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Elements::ElementAtlas* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementAtlas*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Elements_ElementAtlas(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::ElementAtlas*, ::app::Fuse::Elements::ElementAtlas*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementAtlas*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_ElementAtlas(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Elements_ElementAtlas(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementAtlas(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementAtlas(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatch(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Elements::ElementBatch* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatch*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatch(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::ElementBatch*, ::app::Fuse::Elements::ElementBatch*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatch*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatch(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatch(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatch(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatch(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatchEntry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Elements::ElementBatchEntry* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatchEntry*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatchEntry(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::ElementBatchEntry*, ::app::Fuse::Elements::ElementBatchEntry*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatchEntry*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatchEntry(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatchEntry(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatchEntry(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatchEntry(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Elements_IElementBatchDrawable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Elements_IElementBatchDrawable(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_IElementBatchDrawable(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Elements_IElementBatchDrawable(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_IElementBatchDrawable(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Elements_IElementBatchDrawable(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Entities_Component(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Entities::Component* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Component*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Entities_Component(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Entities::Component*, ::app::Fuse::Entities::Component*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Component*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Entities_Component(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Entities_Component(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Component(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Component(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Entities_Entity(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Entities::Entity* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entity*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Entities_Entity(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Entities::Entity*, ::app::Fuse::Entities::Entity*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entity*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Entities_Entity(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Entities_Entity(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Entity(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Entity(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Entities_Entry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Entities::Entry pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entry>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Entities_Entry(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Entities::Entry, ::app::Fuse::Entities::Entry>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entry>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Entities_Entry(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Entities_Entry(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Entry(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Entry(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_Capturer(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Input::Capturer* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Capturer*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_Capturer(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Input::Capturer*, ::app::Fuse::Input::Capturer*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Capturer*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_Capturer(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_Capturer(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_Capturer(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_Capturer(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_FocusGainedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_FocusGainedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_FocusGainedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_FocusGainedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_FocusGainedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_FocusGainedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_FocusLostHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_FocusLostHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_FocusLostHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_FocusLostHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_FocusLostHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_FocusLostHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_IsFocusableChangedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_IsFocusableChangedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_IsFocusableChangedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_IsFocusableChangedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_IsFocusableChangedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_IsFocusableChangedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_KeyPressedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_KeyPressedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_KeyPressedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_KeyPressedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_KeyPressedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_KeyPressedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_KeyReleasedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_KeyReleasedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_KeyReleasedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_KeyReleasedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_KeyReleasedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_KeyReleasedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_Pointer_PELHolder(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Input::Pointer_PELHolder* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Pointer_PELHolder*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_Pointer_PELHolder(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Input::Pointer_PELHolder*, ::app::Fuse::Input::Pointer_PELHolder*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Pointer_PELHolder*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_Pointer_PELHolder(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_Pointer_PELHolder(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_Pointer_PELHolder(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_Pointer_PELHolder(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_PointerEnteredHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_PointerEnteredHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerEnteredHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_PointerEnteredHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerEnteredHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerEnteredHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_PointerLeftHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_PointerLeftHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerLeftHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_PointerLeftHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerLeftHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerLeftHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_PointerMovedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_PointerMovedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerMovedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_PointerMovedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerMovedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerMovedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_PointerPressedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_PointerPressedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerPressedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_PointerPressedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerPressedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerPressedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_PointerReleasedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_PointerReleasedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerReleasedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_PointerReleasedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerReleasedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerReleasedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_PointerWheelMovedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_PointerWheelMovedHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerWheelMovedHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_PointerWheelMovedHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerWheelMovedHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerWheelMovedHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Input_TextEnteredHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Input_TextEnteredHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Input_TextEnteredHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Input_TextEnteredHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_TextEnteredHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Input_TextEnteredHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_iOS_StatusBarConfig(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::iOS::StatusBarConfig* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::iOS::StatusBarConfig*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_iOS_StatusBarConfig(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::iOS::StatusBarConfig*, ::app::Fuse::iOS::StatusBarConfig*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::iOS::StatusBarConfig*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_iOS_StatusBarConfig(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_iOS_StatusBarConfig(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_iOS_StatusBarConfig(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_iOS_StatusBarConfig(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_IViewport(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_IViewport(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_IViewport(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_IViewport(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_IViewport(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_IViewport(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Layouts_Column(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Layouts::Column* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Column*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Layouts_Column(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Layouts::Column*, ::app::Fuse::Layouts::Column*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Column*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Layouts_Column(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Layouts_Column(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_Column(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_Column(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Layouts::DefinitionBase_ParseDataItem pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Layouts::DefinitionBase_ParseDataItem, ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Layouts_Row(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Layouts::Row* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Row*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Layouts_Row(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Layouts::Row*, ::app::Fuse::Layouts::Row*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Row*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Layouts_Row(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Layouts_Row(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_Row(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_Row(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Navigation_INavigationAnimator(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Navigation_INavigationAnimator(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Navigation_INavigationAnimator(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Navigation_INavigationAnimator(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Navigation_INavigationAnimator(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Navigation_INavigationAnimator(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Navigation_IPageResourceBinding(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Navigation_IPageResourceBinding(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Navigation_IPageResourceBinding(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Navigation_IPageResourceBinding(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Navigation_IPageResourceBinding(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Navigation_IPageResourceBinding(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Node(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Node* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Node*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Node(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Node*, ::app::Fuse::Node*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Node*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Node(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Node(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Node(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Node(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Physics_Body(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Physics::Body* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Physics::Body*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Physics_Body(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Physics::Body*, ::app::Fuse::Physics::Body*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Physics::Body*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Physics_Body(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Physics_Body(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Physics_Body(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Physics_Body(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Physics_IRule(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Physics_IRule(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Physics_IRule(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Physics_IRule(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Physics_IRule(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Physics_IRule(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Reactive_Case(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Reactive::Case* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::Case*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Reactive_Case(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Reactive::Case*, ::app::Fuse::Reactive::Case*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::Case*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Reactive_Case(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Reactive_Case(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_Case(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_Case(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Reactive_FuseJS_Timer_Time(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Reactive::FuseJS::Timer_Time* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Reactive::FuseJS::Timer_Time*, ::app::Fuse::Reactive::FuseJS::Timer_Time*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Reactive_JavaScript(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Reactive::JavaScript* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::JavaScript*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Reactive_JavaScript(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Reactive::JavaScript*, ::app::Fuse::Reactive::JavaScript*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::JavaScript*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Reactive_JavaScript(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Reactive_JavaScript(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_JavaScript(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_JavaScript(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_RenderTargetEntry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::RenderTargetEntry* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::RenderTargetEntry*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_RenderTargetEntry(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::RenderTargetEntry*, ::app::Fuse::RenderTargetEntry*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::RenderTargetEntry*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_RenderTargetEntry(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_RenderTargetEntry(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_RenderTargetEntry(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_RenderTargetEntry(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Resources_ImageSource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Resources::ImageSource* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Resources::ImageSource*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Resources_ImageSource(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Resources::ImageSource*, ::app::Fuse::Resources::ImageSource*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Resources::ImageSource*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Resources_ImageSource(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Resources_ImageSource(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Resources_ImageSource(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Resources_ImageSource(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Resources_IMemoryResource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Resources_IMemoryResource(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Resources_IMemoryResource(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Resources_IMemoryResource(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Resources_IMemoryResource(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Resources_IMemoryResource(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Resources_ISoftDisposable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Resources_ISoftDisposable(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Resources_ISoftDisposable(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Resources_ISoftDisposable(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Resources_ISoftDisposable(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Resources_ISoftDisposable(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Scripting_INameListener(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Scripting_INameListener(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Scripting_INameListener(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Scripting_INameListener(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Scripting_INameListener(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Scripting_INameListener(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Scripting_NativeMember(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Scripting::NativeMember* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Scripting::NativeMember*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Scripting_NativeMember(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Scripting::NativeMember*, ::app::Fuse::Scripting::NativeMember*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Scripting::NativeMember*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Scripting_NativeMember(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Scripting_NativeMember(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Scripting_NativeMember(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Scripting_NativeMember(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Stage(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Stage* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Stage*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Stage(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Stage*, ::app::Fuse::Stage*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Stage*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Stage(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Stage(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Stage(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Stage(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Style(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Style* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Style*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Style(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Style*, ::app::Fuse::Style*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Style*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Style(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Style(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Style(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Style(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_StyleProperty(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::StyleProperty* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::StyleProperty*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_StyleProperty(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::StyleProperty*, ::app::Fuse::StyleProperty*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::StyleProperty*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_StyleProperty(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_StyleProperty(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_StyleProperty(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_StyleProperty(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Transform(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Transform* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Transform*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Transform(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Transform*, ::app::Fuse::Transform*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Transform*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Transform(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Transform(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Transform(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Transform(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Triggers_Actions_TriggerAction(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Triggers::Actions::TriggerAction* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::Actions::TriggerAction*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Triggers_Actions_TriggerAction(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Triggers::Actions::TriggerAction*, ::app::Fuse::Triggers::Actions::TriggerAction*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::Actions::TriggerAction*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Triggers_Actions_TriggerAction(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Triggers_Actions_TriggerAction(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Triggers_Actions_TriggerAction(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Triggers_Actions_TriggerAction(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_Triggers_State(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::Triggers::State* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::State*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_Triggers_State(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Triggers::State*, ::app::Fuse::Triggers::State*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::State*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_Triggers_State(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_Triggers_State(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Triggers_State(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_Triggers_State(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Fuse_UpdateListener(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Fuse::UpdateListener* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::UpdateListener*>(pivotIndex);
        ArraySortImpl__SwapInternal__Fuse_UpdateListener(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::UpdateListener*, ::app::Fuse::UpdateListener*>(::uPtr< ::uArray*>(data)->Item< ::app::Fuse::UpdateListener*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Fuse_UpdateListener(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Fuse_UpdateListener(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Fuse_UpdateListener(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Fuse_UpdateListener(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__int(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        int pivotValue = ::uPtr< ::uArray*>(data)->Item< int>(pivotIndex);
        ArraySortImpl__SwapInternal__int(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, int, int>(::uPtr< ::uArray*>(data)->Item< int>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__int(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__int(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__int(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__int(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__int4(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Int4 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Int4>(pivotIndex);
        ArraySortImpl__SwapInternal__int4(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Int4, ::app::Uno::Int4>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Int4>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__int4(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__int4(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__int4(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__int4(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__object(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__object(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__object(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__object(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__object(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__object(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Outracks::Simulator::Bytecode::TypeName* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(pivotIndex);
        ArraySortImpl__SwapInternal__Outracks_Simulator_Bytecode_TypeName(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Outracks::Simulator::Bytecode::TypeName*, ::app::Outracks::Simulator::Bytecode::TypeName*>(::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Outracks_Simulator_Bytecode_TypeName(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Outracks_Simulator_Bytecode_TypeName(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Bytecode_TypeName(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Bytecode_TypeName(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(pivotIndex);
        ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*, ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(pivotIndex);
        ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*, ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__string(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uString* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uString*>(pivotIndex);
        ArraySortImpl__SwapInternal__string(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uString*, ::uString*>(::uPtr< ::uArray*>(data)->Item< ::uString*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__string(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__string(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__string(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__string(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Action(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Action(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Action(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Action(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Action(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Action(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_CharPunctuationChecker_PunctuationRange(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::CharPunctuationChecker_PunctuationRange* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::CharPunctuationChecker_PunctuationRange*, ::app::Uno::CharPunctuationChecker_PunctuationRange*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*, ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelDrawable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::ModelDrawable* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelDrawable*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelDrawable(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelDrawable*, ::app::Uno::Content::Models::ModelDrawable*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelDrawable*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelDrawable(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelDrawable(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelDrawable(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelDrawable(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelNode(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::ModelNode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelNode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelNode(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelNode*, ::app::Uno::Content::Models::ModelNode*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelNode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelNode(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelNode(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelNode(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelNode(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelParameter_float4x4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::ModelParameter__float4x4* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelParameter__float4x4*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelParameter__float4x4*, ::app::Uno::Content::Models::ModelParameter__float4x4*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelParameter__float4x4*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelSkin(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::ModelSkin* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelSkin*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelSkin(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelSkin*, ::app::Uno::Content::Models::ModelSkin*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelSkin*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelSkin(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_ModelSkin(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelSkin(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelSkin(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinBone(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::SkinBone* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinBone*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_SkinBone(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::SkinBone*, ::app::Uno::Content::Models::SkinBone*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinBone*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_SkinBone(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_SkinBone(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinBone(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinBone(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinDrawable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::SkinDrawable* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinDrawable*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_SkinDrawable(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::SkinDrawable*, ::app::Uno::Content::Models::SkinDrawable*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinDrawable*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_SkinDrawable(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_SkinDrawable(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinDrawable(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinDrawable(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Models_VertexInfluence(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Models::VertexInfluence* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::VertexInfluence*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Models_VertexInfluence(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::VertexInfluence*, ::app::Uno::Content::Models::VertexInfluence*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::VertexInfluence*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_VertexInfluence(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Models_VertexInfluence(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_VertexInfluence(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_VertexInfluence(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4 pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Data_Json_Value(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Data::Json::Value* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Json::Value*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Data_Json_Value(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Json::Value*, ::app::Uno::Data::Json::Value*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Json::Value*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Data_Json_Value(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Data_Json_Value(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Json_Value(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Json_Value(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttribute(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Data::Xml::XmlAttribute* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttribute*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttribute(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlAttribute*, ::app::Uno::Data::Xml::XmlAttribute*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttribute*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttribute(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttribute(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttribute(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttribute(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttributeHandle(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Data::Xml::XmlAttributeHandle* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttributeHandle*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlAttributeHandle*, ::app::Uno::Data::Xml::XmlAttributeHandle*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttributeHandle*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlLinkedNode(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Data::Xml::XmlLinkedNode* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlLinkedNode*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlLinkedNode(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlLinkedNode*, ::app::Uno::Data::Xml::XmlLinkedNode*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlLinkedNode*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlLinkedNode(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlLinkedNode(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlLinkedNode(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlLinkedNode(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlNodeHandle(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Data::Xml::XmlNodeHandle* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlNodeHandle*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlNodeHandle(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlNodeHandle*, ::app::Uno::Data::Xml::XmlNodeHandle*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlNodeHandle*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlNodeHandle(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlNodeHandle(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlNodeHandle(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlNodeHandle(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Diagnostics_ProfileEvent(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Diagnostics::ProfileEvent* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Diagnostics::ProfileEvent*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Diagnostics_ProfileEvent(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Diagnostics::ProfileEvent*, ::app::Uno::Diagnostics::ProfileEvent*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Diagnostics::ProfileEvent*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Diagnostics_ProfileEvent(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Diagnostics_ProfileEvent(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Diagnostics_ProfileEvent(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Diagnostics_ProfileEvent(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_EventHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uDelegate* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_EventHandler(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_EventHandler(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_EventHandler(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_EventHandler(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_EventHandler(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Exception(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Exception* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Exception*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Exception(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Exception*, ::app::Uno::Exception*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Exception*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Exception(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Exception(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Exception(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Exception(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Graphics_PolygonFace(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        int pivotValue = ::uPtr< ::uArray*>(data)->Item< int>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Graphics_PolygonFace(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, int, int>(::uPtr< ::uArray*>(data)->Item< int>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Graphics_PolygonFace(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Graphics_PolygonFace(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Graphics_PolygonFace(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Graphics_PolygonFace(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Net_Http_HttpMessageHandlerRequest(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Net::Http::HttpMessageHandlerRequest* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Net::Http::HttpMessageHandlerRequest*, ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Platform_Key(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        int pivotValue = ::uPtr< ::uArray*>(data)->Item< int>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Platform_Key(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, int, int>(::uPtr< ::uArray*>(data)->Item< int>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Platform_Key(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Platform_Key(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Platform_Key(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Platform_Key(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Reflection_CppField(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uField* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uField*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Reflection_CppField(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uField*, ::uField*>(::uPtr< ::uArray*>(data)->Item< ::uField*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Reflection_CppField(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Reflection_CppField(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Reflection_CppField(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Reflection_CppField(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Reflection_CppFunction(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uFunction* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uFunction*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Reflection_CppFunction(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uFunction*, ::uFunction*>(::uPtr< ::uArray*>(data)->Item< ::uFunction*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Reflection_CppFunction(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Reflection_CppFunction(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Reflection_CppFunction(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Reflection_CppFunction(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::Runtime::Implementation::Internal::FormatStringToken* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*, ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_UX_FileSource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::UX::FileSource* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::FileSource*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_UX_FileSource(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::UX::FileSource*, ::app::Uno::UX::FileSource*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::FileSource*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_UX_FileSource(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_UX_FileSource(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_FileSource(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_FileSource(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_UX_IFactory(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_UX_IFactory(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_UX_IFactory(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_UX_IFactory(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_IFactory(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_IFactory(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_UX_ITemplate(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::uObject* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_UX_ITemplate(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(::uPtr< ::uArray*>(data)->Item< ::uObject*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_UX_ITemplate(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_UX_ITemplate(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_ITemplate(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_ITemplate(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__QuickSortInternal__Uno_UX_Resource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    if (left < right)
    {
        int rightIndex = right - 1;
        int pivotIndex = left;
        ::app::Uno::UX::Resource* pivotValue = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::Resource*>(pivotIndex);
        ArraySortImpl__SwapInternal__Uno_UX_Resource(NULL, data, pivotIndex, rightIndex);

        for (int i = left; i < rightIndex; i++)
        {
            if (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::UX::Resource*, ::app::Uno::UX::Resource*>(::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::Resource*>(i), pivotValue) < 0)
            {
                ArraySortImpl__SwapInternal__Uno_UX_Resource(NULL, data, i, pivotIndex);
                pivotIndex++;
            }
        }

        ArraySortImpl__SwapInternal__Uno_UX_Resource(NULL, data, pivotIndex, rightIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_Resource(NULL, data, comparison, left, pivotIndex);
        ArraySortImpl__QuickSortInternal__Uno_UX_Resource(NULL, data, comparison, pivotIndex + 1, right);
    }
}

void ArraySortImpl__ShellSortInternal__byte(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uByte temp = ::uPtr< ::uArray*>(data)->Item< ::uByte>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uByte, ::uByte>(temp, data->Item< ::uByte>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__byte(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::uByte>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__byte__(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uArray* temp = ::uPtr< ::uArray*>(data)->Item< ::uArray*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uArray*, ::uArray*>(temp, data->Item< ::uArray*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__byte__(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uArray*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__char(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uChar temp = ::uPtr< ::uArray*>(data)->Item< ::uChar>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uChar, ::uChar>(temp, data->Item< ::uChar>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__char(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::uChar>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Experimental_Cache_DiskCacheEntry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Experimental::Cache::DiskCacheEntry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Experimental::Cache::DiskCacheEntry*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Experimental::Cache::DiskCacheEntry*, ::app::Experimental::Cache::DiskCacheEntry*>(temp, data->Item< ::app::Experimental::Cache::DiskCacheEntry*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Experimental_Cache_DiskCacheEntry(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Experimental::Cache::DiskCacheEntry*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__float2(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Float2 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float2>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Float2, ::app::Uno::Float2>(temp, data->Item< ::app::Uno::Float2>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__float2(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Float2>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__float3(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Float3 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float3>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Float3, ::app::Uno::Float3>(temp, data->Item< ::app::Uno::Float3>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__float3(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Float3>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__float4(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Float4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float4>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Float4, ::app::Uno::Float4>(temp, data->Item< ::app::Uno::Float4>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__float4(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Float4>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__framebuffer(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Graphics::Framebuffer* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Graphics::Framebuffer*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Graphics::Framebuffer*, ::app::Uno::Graphics::Framebuffer*>(temp, data->Item< ::app::Uno::Graphics::Framebuffer*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__framebuffer(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Graphics::Framebuffer*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_Animator(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::Animator* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Animator*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::Animator*, ::app::Fuse::Animations::Animator*>(temp, data->Item< ::app::Fuse::Animations::Animator*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_Animator(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::Animator*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_IMixerMaster(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_IMixerMaster(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_Keyframe(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::Keyframe* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Keyframe*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::Keyframe*, ::app::Fuse::Animations::Keyframe*>(temp, data->Item< ::app::Fuse::Animations::Keyframe*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_Keyframe(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::Keyframe*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_bool_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__bool* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__bool*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__bool*, ::app::Fuse::Animations::MixerHandle__bool*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__bool*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_bool_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__bool*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_char_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__char* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__char*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__char*, ::app::Fuse::Animations::MixerHandle__char*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__char*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_char_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__char*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_double_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__double* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__double*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__double*, ::app::Fuse::Animations::MixerHandle__double*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__double*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_double_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__double*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__float* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float*, ::app::Fuse::Animations::MixerHandle__float*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__float*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float2_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__float2* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float2*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float2*, ::app::Fuse::Animations::MixerHandle__float2*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__float2*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float2_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float2*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float3_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__float3* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float3*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float3*, ::app::Fuse::Animations::MixerHandle__float3*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__float3*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float3_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float3*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__float4* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float4*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__float4*, ::app::Fuse::Animations::MixerHandle__float4*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__float4*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float4_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float4*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Font_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Font* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Font*, ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Node_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Node* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Node*, ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*, ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Transform* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Transform*, ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__int* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int*, ::app::Fuse::Animations::MixerHandle__int*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__int*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int2_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__int2* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int2*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int2*, ::app::Fuse::Animations::MixerHandle__int2*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__int2*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int2_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int2*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int3_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__int3* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int3*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int3*, ::app::Fuse::Animations::MixerHandle__int3*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__int3*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int3_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int3*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__int4* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int4*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__int4*, ::app::Fuse::Animations::MixerHandle__int4*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__int4*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int4_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int4*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_long_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__long* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__long*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__long*, ::app::Fuse::Animations::MixerHandle__long*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__long*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_long_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__long*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_object_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__object* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__object*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__object*, ::app::Fuse::Animations::MixerHandle__object*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__object*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_object_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__object*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_short_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__short* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__short*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__short*, ::app::Fuse::Animations::MixerHandle__short*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__short*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_short_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__short*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_string_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__string* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__string*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__string*, ::app::Fuse::Animations::MixerHandle__string*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__string*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_string_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__string*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Uno_EventArgs* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*, ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*, ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*, ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(temp, data->Item< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Behavior(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Behavior* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Behavior*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Behavior*, ::app::Fuse::Behavior*>(temp, data->Item< ::app::Fuse::Behavior*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Behavior(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Behavior*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_CacheFramebuffer(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::CacheFramebuffer* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::CacheFramebuffer*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::CacheFramebuffer*, ::app::Fuse::CacheFramebuffer*>(temp, data->Item< ::app::Fuse::CacheFramebuffer*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_CacheFramebuffer(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::CacheFramebuffer*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Controls_Control(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Controls::Control* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Control*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::Control*, ::app::Fuse::Controls::Control*>(temp, data->Item< ::app::Fuse::Controls::Control*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_Control(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Controls::Control*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Controls_Internal_WordWrapperWord(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Controls::Internal::WordWrapperWord* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WordWrapperWord*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::Internal::WordWrapperWord*, ::app::Fuse::Controls::Internal::WordWrapperWord*>(temp, data->Item< ::app::Fuse::Controls::Internal::WordWrapperWord*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Controls::Internal::WordWrapperWord*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Controls_Internal_WrappedLine(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Controls::Internal::WrappedLine* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WrappedLine*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::Internal::WrappedLine*, ::app::Fuse::Controls::Internal::WrappedLine*>(temp, data->Item< ::app::Fuse::Controls::Internal::WrappedLine*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WrappedLine(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Controls::Internal::WrappedLine*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Controls_TextEdit_LineCacheLine(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Controls::TextEdit::LineCacheLine* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Controls::TextEdit::LineCacheLine*, ::app::Fuse::Controls::TextEdit::LineCacheLine*>(temp, data->Item< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_Batching_Batch(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::Batching::Batch* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Batch*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Batching::Batch*, ::app::Fuse::Drawing::Batching::Batch*>(temp, data->Item< ::app::Fuse::Drawing::Batching::Batch*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Batch(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::Batching::Batch*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_Batching_Entry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::Batching::Entry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Entry*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Batching::Entry*, ::app::Fuse::Drawing::Batching::Entry*>(temp, data->Item< ::app::Fuse::Drawing::Batching::Entry*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Entry(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::Batching::Entry*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_Brush(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::Brush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Brush*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Brush*, ::app::Fuse::Drawing::Brush*>(temp, data->Item< ::app::Fuse::Drawing::Brush*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Brush(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::Brush*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_Contour(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::Contour* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Contour*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Contour*, ::app::Fuse::Drawing::Contour*>(temp, data->Item< ::app::Fuse::Drawing::Contour*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Contour(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::Contour*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_GradientStop(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::GradientStop* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::GradientStop*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::GradientStop*, ::app::Fuse::Drawing::GradientStop*>(temp, data->Item< ::app::Fuse::Drawing::GradientStop*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_GradientStop(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::GradientStop*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_Internal_MultiBuffer_Field(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::Internal::MultiBuffer_Field* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Internal::MultiBuffer_Field*, ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(temp, data->Item< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_PathGeometry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::PathGeometry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::PathGeometry*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::PathGeometry*, ::app::Fuse::Drawing::PathGeometry*>(temp, data->Item< ::app::Fuse::Drawing::PathGeometry*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_PathGeometry(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::PathGeometry*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Drawing_Stroke(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Drawing::Stroke* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Stroke*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Drawing::Stroke*, ::app::Fuse::Drawing::Stroke*>(temp, data->Item< ::app::Fuse::Drawing::Stroke*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Drawing_Stroke(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Drawing::Stroke*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Effects_Effect(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Effects::Effect* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Effects::Effect*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Effects::Effect*, ::app::Fuse::Effects::Effect*>(temp, data->Item< ::app::Fuse::Effects::Effect*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Effects_Effect(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Effects::Effect*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Elements_Element(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Elements::Element* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::Element*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::Element*, ::app::Fuse::Elements::Element*>(temp, data->Item< ::app::Fuse::Elements::Element*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_Element(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Elements::Element*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Elements_ElementAtlas(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Elements::ElementAtlas* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementAtlas*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::ElementAtlas*, ::app::Fuse::Elements::ElementAtlas*>(temp, data->Item< ::app::Fuse::Elements::ElementAtlas*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_ElementAtlas(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Elements::ElementAtlas*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Elements_ElementBatch(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Elements::ElementBatch* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatch*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::ElementBatch*, ::app::Fuse::Elements::ElementBatch*>(temp, data->Item< ::app::Fuse::Elements::ElementBatch*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatch(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Elements::ElementBatch*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Elements_ElementBatchEntry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Elements::ElementBatchEntry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatchEntry*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Elements::ElementBatchEntry*, ::app::Fuse::Elements::ElementBatchEntry*>(temp, data->Item< ::app::Fuse::Elements::ElementBatchEntry*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatchEntry(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Elements::ElementBatchEntry*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Elements_IElementBatchDrawable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Elements_IElementBatchDrawable(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Entities_Component(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Entities::Component* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Component*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Entities::Component*, ::app::Fuse::Entities::Component*>(temp, data->Item< ::app::Fuse::Entities::Component*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Entities_Component(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Entities::Component*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Entities_Entity(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Entities::Entity* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entity*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Entities::Entity*, ::app::Fuse::Entities::Entity*>(temp, data->Item< ::app::Fuse::Entities::Entity*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Entities_Entity(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Entities::Entity*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Entities_Entry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Entities::Entry temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entry>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Entities::Entry, ::app::Fuse::Entities::Entry>(temp, data->Item< ::app::Fuse::Entities::Entry>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Entities_Entry(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Fuse::Entities::Entry>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_Capturer(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Input::Capturer* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Capturer*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Input::Capturer*, ::app::Fuse::Input::Capturer*>(temp, data->Item< ::app::Fuse::Input::Capturer*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_Capturer(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Input::Capturer*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_FocusGainedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_FocusGainedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_FocusLostHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_FocusLostHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_IsFocusableChangedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_IsFocusableChangedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_KeyPressedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_KeyPressedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_KeyReleasedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_KeyReleasedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_Pointer_PELHolder(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Input::Pointer_PELHolder* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Pointer_PELHolder*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Input::Pointer_PELHolder*, ::app::Fuse::Input::Pointer_PELHolder*>(temp, data->Item< ::app::Fuse::Input::Pointer_PELHolder*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_Pointer_PELHolder(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Input::Pointer_PELHolder*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_PointerEnteredHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerEnteredHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_PointerLeftHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerLeftHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_PointerMovedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerMovedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_PointerPressedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerPressedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_PointerReleasedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerReleasedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_PointerWheelMovedHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_PointerWheelMovedHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Input_TextEnteredHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Input_TextEnteredHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_iOS_StatusBarConfig(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::iOS::StatusBarConfig* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::iOS::StatusBarConfig*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::iOS::StatusBarConfig*, ::app::Fuse::iOS::StatusBarConfig*>(temp, data->Item< ::app::Fuse::iOS::StatusBarConfig*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_iOS_StatusBarConfig(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::iOS::StatusBarConfig*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_IViewport(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_IViewport(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Layouts_Column(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Layouts::Column* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Column*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Layouts::Column*, ::app::Fuse::Layouts::Column*>(temp, data->Item< ::app::Fuse::Layouts::Column*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Layouts_Column(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Layouts::Column*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Layouts::DefinitionBase_ParseDataItem temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Layouts::DefinitionBase_ParseDataItem, ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(temp, data->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Layouts_Row(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Layouts::Row* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Row*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Layouts::Row*, ::app::Fuse::Layouts::Row*>(temp, data->Item< ::app::Fuse::Layouts::Row*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Layouts_Row(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Layouts::Row*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Navigation_INavigationAnimator(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Navigation_INavigationAnimator(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Navigation_IPageResourceBinding(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Navigation_IPageResourceBinding(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Node(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Node* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Node*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Node*, ::app::Fuse::Node*>(temp, data->Item< ::app::Fuse::Node*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Node(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Node*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Physics_Body(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Physics::Body* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Physics::Body*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Physics::Body*, ::app::Fuse::Physics::Body*>(temp, data->Item< ::app::Fuse::Physics::Body*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Physics_Body(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Physics::Body*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Physics_IRule(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Physics_IRule(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Reactive_Case(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Reactive::Case* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::Case*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Reactive::Case*, ::app::Fuse::Reactive::Case*>(temp, data->Item< ::app::Fuse::Reactive::Case*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Reactive_Case(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Reactive::Case*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Reactive_FuseJS_Timer_Time(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Reactive::FuseJS::Timer_Time* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Reactive::FuseJS::Timer_Time*, ::app::Fuse::Reactive::FuseJS::Timer_Time*>(temp, data->Item< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Reactive_JavaScript(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Reactive::JavaScript* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::JavaScript*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Reactive::JavaScript*, ::app::Fuse::Reactive::JavaScript*>(temp, data->Item< ::app::Fuse::Reactive::JavaScript*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Reactive_JavaScript(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Reactive::JavaScript*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_RenderTargetEntry(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::RenderTargetEntry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::RenderTargetEntry*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::RenderTargetEntry*, ::app::Fuse::RenderTargetEntry*>(temp, data->Item< ::app::Fuse::RenderTargetEntry*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_RenderTargetEntry(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::RenderTargetEntry*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Resources_ImageSource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Resources::ImageSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Resources::ImageSource*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Resources::ImageSource*, ::app::Fuse::Resources::ImageSource*>(temp, data->Item< ::app::Fuse::Resources::ImageSource*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Resources_ImageSource(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Resources::ImageSource*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Resources_IMemoryResource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Resources_IMemoryResource(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Resources_ISoftDisposable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Resources_ISoftDisposable(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Scripting_INameListener(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Scripting_INameListener(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Scripting_NativeMember(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Scripting::NativeMember* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Scripting::NativeMember*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Scripting::NativeMember*, ::app::Fuse::Scripting::NativeMember*>(temp, data->Item< ::app::Fuse::Scripting::NativeMember*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Scripting_NativeMember(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Scripting::NativeMember*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Stage(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Stage* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Stage*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Stage*, ::app::Fuse::Stage*>(temp, data->Item< ::app::Fuse::Stage*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Stage(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Stage*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Style(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Style* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Style*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Style*, ::app::Fuse::Style*>(temp, data->Item< ::app::Fuse::Style*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Style(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Style*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_StyleProperty(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::StyleProperty* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::StyleProperty*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::StyleProperty*, ::app::Fuse::StyleProperty*>(temp, data->Item< ::app::Fuse::StyleProperty*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_StyleProperty(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::StyleProperty*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Transform(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Transform* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Transform*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Transform*, ::app::Fuse::Transform*>(temp, data->Item< ::app::Fuse::Transform*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Transform(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Transform*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Triggers_Actions_TriggerAction(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Triggers::Actions::TriggerAction* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::Actions::TriggerAction*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Triggers::Actions::TriggerAction*, ::app::Fuse::Triggers::Actions::TriggerAction*>(temp, data->Item< ::app::Fuse::Triggers::Actions::TriggerAction*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Triggers_Actions_TriggerAction(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Triggers::Actions::TriggerAction*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_Triggers_State(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::Triggers::State* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::State*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::Triggers::State*, ::app::Fuse::Triggers::State*>(temp, data->Item< ::app::Fuse::Triggers::State*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_Triggers_State(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::Triggers::State*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Fuse_UpdateListener(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Fuse::UpdateListener* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::UpdateListener*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Fuse::UpdateListener*, ::app::Fuse::UpdateListener*>(temp, data->Item< ::app::Fuse::UpdateListener*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Fuse_UpdateListener(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Fuse::UpdateListener*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__int(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            int temp = ::uPtr< ::uArray*>(data)->Item< int>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, int, int>(temp, data->Item< int>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__int(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< int>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__int4(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Int4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Int4>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Int4, ::app::Uno::Int4>(temp, data->Item< ::app::Uno::Int4>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__int4(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Int4>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__object(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__object(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Outracks::Simulator::Bytecode::TypeName* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Outracks::Simulator::Bytecode::TypeName*, ::app::Outracks::Simulator::Bytecode::TypeName*>(temp, data->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Outracks_Simulator_Bytecode_TypeName(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Outracks::Simulator::Bytecode::TypeName*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*, ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(temp, data->Item< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*, ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(temp, data->Item< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__string(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uString* temp = ::uPtr< ::uArray*>(data)->Item< ::uString*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uString*, ::uString*>(temp, data->Item< ::uString*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__string(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uString*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Action(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Action(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_CharPunctuationChecker_PunctuationRange(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::CharPunctuationChecker_PunctuationRange* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::CharPunctuationChecker_PunctuationRange*, ::app::Uno::CharPunctuationChecker_PunctuationRange*>(temp, data->Item< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(temp, data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(temp, data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*, ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(temp, data->Item< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelDrawable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::ModelDrawable* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelDrawable*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelDrawable*, ::app::Uno::Content::Models::ModelDrawable*>(temp, data->Item< ::app::Uno::Content::Models::ModelDrawable*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelDrawable(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::ModelDrawable*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelNode(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::ModelNode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelNode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelNode*, ::app::Uno::Content::Models::ModelNode*>(temp, data->Item< ::app::Uno::Content::Models::ModelNode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelNode(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::ModelNode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelParameter_float4x4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::ModelParameter__float4x4* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelParameter__float4x4*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelParameter__float4x4*, ::app::Uno::Content::Models::ModelParameter__float4x4*>(temp, data->Item< ::app::Uno::Content::Models::ModelParameter__float4x4*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::ModelParameter__float4x4*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelSkin(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::ModelSkin* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelSkin*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::ModelSkin*, ::app::Uno::Content::Models::ModelSkin*>(temp, data->Item< ::app::Uno::Content::Models::ModelSkin*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_ModelSkin(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::ModelSkin*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_SkinBone(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::SkinBone* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinBone*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::SkinBone*, ::app::Uno::Content::Models::SkinBone*>(temp, data->Item< ::app::Uno::Content::Models::SkinBone*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_SkinBone(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::SkinBone*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_SkinDrawable(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::SkinDrawable* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinDrawable*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::SkinDrawable*, ::app::Uno::Content::Models::SkinDrawable*>(temp, data->Item< ::app::Uno::Content::Models::SkinDrawable*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_SkinDrawable(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::SkinDrawable*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Models_VertexInfluence(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Models::VertexInfluence* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::VertexInfluence*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Models::VertexInfluence*, ::app::Uno::Content::Models::VertexInfluence*>(temp, data->Item< ::app::Uno::Content::Models::VertexInfluence*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Models_VertexInfluence(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Content::Models::VertexInfluence*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(temp, data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(temp, data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(temp, data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(temp, data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(temp, data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Data_Json_Value(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Data::Json::Value* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Json::Value*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Json::Value*, ::app::Uno::Data::Json::Value*>(temp, data->Item< ::app::Uno::Data::Json::Value*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Data_Json_Value(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Data::Json::Value*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlAttribute(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Data::Xml::XmlAttribute* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttribute*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlAttribute*, ::app::Uno::Data::Xml::XmlAttribute*>(temp, data->Item< ::app::Uno::Data::Xml::XmlAttribute*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttribute(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Data::Xml::XmlAttribute*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlAttributeHandle(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Data::Xml::XmlAttributeHandle* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttributeHandle*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlAttributeHandle*, ::app::Uno::Data::Xml::XmlAttributeHandle*>(temp, data->Item< ::app::Uno::Data::Xml::XmlAttributeHandle*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Data::Xml::XmlAttributeHandle*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlLinkedNode(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Data::Xml::XmlLinkedNode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlLinkedNode*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlLinkedNode*, ::app::Uno::Data::Xml::XmlLinkedNode*>(temp, data->Item< ::app::Uno::Data::Xml::XmlLinkedNode*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlLinkedNode(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Data::Xml::XmlLinkedNode*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlNodeHandle(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Data::Xml::XmlNodeHandle* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlNodeHandle*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Data::Xml::XmlNodeHandle*, ::app::Uno::Data::Xml::XmlNodeHandle*>(temp, data->Item< ::app::Uno::Data::Xml::XmlNodeHandle*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlNodeHandle(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Data::Xml::XmlNodeHandle*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Diagnostics_ProfileEvent(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Diagnostics::ProfileEvent* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Diagnostics::ProfileEvent*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Diagnostics::ProfileEvent*, ::app::Uno::Diagnostics::ProfileEvent*>(temp, data->Item< ::app::Uno::Diagnostics::ProfileEvent*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Diagnostics_ProfileEvent(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Diagnostics::ProfileEvent*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_EventHandler(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uDelegate*, ::uDelegate*>(temp, data->Item< ::uDelegate*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_EventHandler(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uDelegate*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Exception(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Exception* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Exception*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Exception*, ::app::Uno::Exception*>(temp, data->Item< ::app::Uno::Exception*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Exception(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Exception*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Graphics_PolygonFace(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            int temp = ::uPtr< ::uArray*>(data)->Item< int>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, int, int>(temp, data->Item< int>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Graphics_PolygonFace(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< int>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Net_Http_HttpMessageHandlerRequest(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Net::Http::HttpMessageHandlerRequest* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Net::Http::HttpMessageHandlerRequest*, ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(temp, data->Item< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Platform_Key(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            int temp = ::uPtr< ::uArray*>(data)->Item< int>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, int, int>(temp, data->Item< int>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Platform_Key(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< int>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Reflection_CppField(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uField* temp = ::uPtr< ::uArray*>(data)->Item< ::uField*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uField*, ::uField*>(temp, data->Item< ::uField*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Reflection_CppField(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::uField*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Reflection_CppFunction(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uFunction* temp = ::uPtr< ::uArray*>(data)->Item< ::uFunction*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uFunction*, ::uFunction*>(temp, data->Item< ::uFunction*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Reflection_CppFunction(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->Item< ::uFunction*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::Runtime::Implementation::Internal::FormatStringToken* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*, ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(temp, data->Item< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_UX_FileSource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::UX::FileSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::FileSource*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::UX::FileSource*, ::app::Uno::UX::FileSource*>(temp, data->Item< ::app::Uno::UX::FileSource*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_UX_FileSource(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::UX::FileSource*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_UX_IFactory(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_UX_IFactory(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_UX_ITemplate(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::uObject*, ::uObject*>(temp, data->Item< ::uObject*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_UX_ITemplate(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::uObject*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__ShellSortInternal__Uno_UX_Resource(::uStatic* __this, ::uArray* data, ::uDelegate* comparison, int left, int right)
{
    float s = 2.8f;
    int size = right - left;
    int increment = size / 2;

    while (increment > 0)
    {
        for (int i = left + increment; i < size; i++)
        {
            int j = i;
            ::app::Uno::UX::Resource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::Resource*>(i);

            while ((j >= increment) && (::uPtr< ::uDelegate*>(comparison)->Invoke< int, ::app::Uno::UX::Resource*, ::app::Uno::UX::Resource*>(temp, data->Item< ::app::Uno::UX::Resource*>(j - increment)) < 0))
            {
                ArraySortImpl__SwapInternal__Uno_UX_Resource(NULL, data, j, j - increment);
                j = j - increment;
            }

            data->ItemStrong< ::app::Uno::UX::Resource*>(j) = temp;
        }

        if (((float)increment < 2.8f) && (increment > 1))
        {
            increment = 1;
        }
        else
        {
            increment = (int)((float)increment / 2.8f);
        }
    }
}

void ArraySortImpl__Sort__byte(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__byte(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__byte(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__byte(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__byte__(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__byte__(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__byte__(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__byte__(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__char(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__char(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__char(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__char(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Experimental_Cache_DiskCacheEntry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Experimental_Cache_DiskCacheEntry(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Experimental_Cache_DiskCacheEntry(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Experimental_Cache_DiskCacheEntry(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__float2(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__float2(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__float2(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__float2(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__float3(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__float3(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__float3(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__float3(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__float4(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__float4(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__float4(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__float4(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__framebuffer(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__framebuffer(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__framebuffer(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__framebuffer(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_Animator(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_Animator(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_Animator(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_Animator(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_IMixerMaster(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_IMixerMaster(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_IMixerMaster(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_IMixerMaster(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_Keyframe(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_Keyframe(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_Keyframe(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_Keyframe(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_bool_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_bool_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_bool_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_bool_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_char_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_char_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_char_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_char_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_double_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_double_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_double_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_double_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float2_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float2_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float2_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float2_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float3_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float3_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float3_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float3_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_float4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float4_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_float4_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_float4_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Font_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Font_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Node_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Node_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Transform_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int2_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int2_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int2_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int2_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int3_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int3_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int3_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int3_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_int4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int4_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_int4_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_int4_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_long_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_long_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_long_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_long_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_object_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_object_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_object_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_object_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_short_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_short_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_short_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_short_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_string_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_string_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_string_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_string_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Uno_EventArgs_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Behavior(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Behavior(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Behavior(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Behavior(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_CacheFramebuffer(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_CacheFramebuffer(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_CacheFramebuffer(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_CacheFramebuffer(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Controls_Control(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Controls_Control(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Control(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Controls_Control(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Controls_Internal_WordWrapperWord(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Controls_Internal_WordWrapperWord(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Controls_Internal_WordWrapperWord(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Controls_Internal_WrappedLine(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Controls_Internal_WrappedLine(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Controls_Internal_WrappedLine(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Controls_Internal_WrappedLine(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Controls_TextEdit_LineCacheLine(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Controls_TextEdit_LineCacheLine(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Controls_TextEdit_LineCacheLine(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_Batching_Batch(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_Batching_Batch(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Batch(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_Batching_Batch(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_Batching_Entry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_Batching_Entry(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Batching_Entry(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_Batching_Entry(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_Brush(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_Brush(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Brush(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_Brush(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_Contour(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_Contour(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Contour(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_Contour(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_GradientStop(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_GradientStop(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_GradientStop(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_GradientStop(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_Internal_MultiBuffer_Field(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_Internal_MultiBuffer_Field(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_PathGeometry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_PathGeometry(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_PathGeometry(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_PathGeometry(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Drawing_Stroke(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Drawing_Stroke(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Drawing_Stroke(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Drawing_Stroke(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Effects_Effect(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Effects_Effect(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Effects_Effect(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Effects_Effect(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Elements_Element(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Elements_Element(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Elements_Element(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Elements_Element(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Elements_ElementAtlas(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Elements_ElementAtlas(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementAtlas(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Elements_ElementAtlas(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Elements_ElementBatch(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Elements_ElementBatch(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatch(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Elements_ElementBatch(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Elements_ElementBatchEntry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Elements_ElementBatchEntry(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Elements_ElementBatchEntry(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Elements_ElementBatchEntry(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Elements_IElementBatchDrawable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Elements_IElementBatchDrawable(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Elements_IElementBatchDrawable(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Elements_IElementBatchDrawable(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Entities_Component(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Entities_Component(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Component(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Entities_Component(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Entities_Entity(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Entities_Entity(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Entity(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Entities_Entity(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Entities_Entry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Entities_Entry(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Entities_Entry(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Entities_Entry(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_Capturer(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_Capturer(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_Capturer(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_Capturer(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_FocusGainedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_FocusGainedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_FocusGainedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_FocusGainedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_FocusLostHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_FocusLostHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_FocusLostHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_FocusLostHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_IsFocusableChangedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_IsFocusableChangedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_IsFocusableChangedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_IsFocusableChangedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_KeyPressedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_KeyPressedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_KeyPressedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_KeyPressedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_KeyReleasedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_KeyReleasedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_KeyReleasedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_KeyReleasedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_Pointer_PELHolder(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_Pointer_PELHolder(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_Pointer_PELHolder(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_Pointer_PELHolder(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_PointerEnteredHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_PointerEnteredHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerEnteredHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_PointerEnteredHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_PointerLeftHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_PointerLeftHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerLeftHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_PointerLeftHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_PointerMovedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_PointerMovedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerMovedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_PointerMovedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_PointerPressedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_PointerPressedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerPressedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_PointerPressedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_PointerReleasedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_PointerReleasedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerReleasedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_PointerReleasedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_PointerWheelMovedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_PointerWheelMovedHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_PointerWheelMovedHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_PointerWheelMovedHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Input_TextEnteredHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Input_TextEnteredHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Input_TextEnteredHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Input_TextEnteredHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_iOS_StatusBarConfig(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_iOS_StatusBarConfig(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_iOS_StatusBarConfig(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_iOS_StatusBarConfig(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_IViewport(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_IViewport(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_IViewport(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_IViewport(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Layouts_Column(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Layouts_Column(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_Column(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Layouts_Column(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Layouts_DefinitionBase_ParseDataItem(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Layouts_Row(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Layouts_Row(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Layouts_Row(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Layouts_Row(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Navigation_INavigationAnimator(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Navigation_INavigationAnimator(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Navigation_INavigationAnimator(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Navigation_INavigationAnimator(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Navigation_IPageResourceBinding(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Navigation_IPageResourceBinding(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Navigation_IPageResourceBinding(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Navigation_IPageResourceBinding(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Node(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Node(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Node(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Node(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Physics_Body(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Physics_Body(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Physics_Body(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Physics_Body(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Physics_IRule(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Physics_IRule(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Physics_IRule(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Physics_IRule(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Reactive_Case(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Reactive_Case(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_Case(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Reactive_Case(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Reactive_FuseJS_Timer_Time(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Reactive_FuseJS_Timer_Time(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Reactive_FuseJS_Timer_Time(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Reactive_JavaScript(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Reactive_JavaScript(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Reactive_JavaScript(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Reactive_JavaScript(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_RenderTargetEntry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_RenderTargetEntry(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_RenderTargetEntry(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_RenderTargetEntry(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Resources_ImageSource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Resources_ImageSource(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Resources_ImageSource(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Resources_ImageSource(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Resources_IMemoryResource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Resources_IMemoryResource(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Resources_IMemoryResource(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Resources_IMemoryResource(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Resources_ISoftDisposable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Resources_ISoftDisposable(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Resources_ISoftDisposable(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Resources_ISoftDisposable(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Scripting_INameListener(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Scripting_INameListener(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Scripting_INameListener(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Scripting_INameListener(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Scripting_NativeMember(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Scripting_NativeMember(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Scripting_NativeMember(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Scripting_NativeMember(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Stage(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Stage(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Stage(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Stage(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Style(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Style(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Style(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Style(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_StyleProperty(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_StyleProperty(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_StyleProperty(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_StyleProperty(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Transform(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Transform(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Transform(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Transform(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Triggers_Actions_TriggerAction(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Triggers_Actions_TriggerAction(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Triggers_Actions_TriggerAction(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Triggers_Actions_TriggerAction(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_Triggers_State(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_Triggers_State(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_Triggers_State(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_Triggers_State(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Fuse_UpdateListener(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Fuse_UpdateListener(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Fuse_UpdateListener(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Fuse_UpdateListener(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__int(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__int(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__int(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__int(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__int4(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__int4(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__int4(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__int4(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__object(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__object(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__object(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__object(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Outracks_Simulator_Bytecode_TypeName(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Bytecode_TypeName(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Outracks_Simulator_Bytecode_TypeName(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__string(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__string(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__string(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__string(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Action(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Action(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Action(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Action(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_CharPunctuationChecker_PunctuationRange(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_CharPunctuationChecker_PunctuationRange(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_CharPunctuationChecker_PunctuationRange(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_ModelDrawable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelDrawable(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelDrawable(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelDrawable(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_ModelNode(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelNode(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelNode(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelNode(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_ModelParameter_float4x4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelParameter_float4x4_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelParameter_float4x4_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_ModelSkin(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelSkin(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_ModelSkin(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_ModelSkin(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_SkinBone(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_SkinBone(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinBone(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_SkinBone(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_SkinDrawable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_SkinDrawable(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_SkinDrawable(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_SkinDrawable(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Models_VertexInfluence(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Models_VertexInfluence(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Models_VertexInfluence(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Models_VertexInfluence(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Data_Json_Value(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Data_Json_Value(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Data_Json_Value(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Data_Json_Value(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Data_Xml_XmlAttribute(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlAttribute(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttribute(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlAttribute(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Data_Xml_XmlAttributeHandle(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlAttributeHandle(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlAttributeHandle(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Data_Xml_XmlLinkedNode(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlLinkedNode(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlLinkedNode(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlLinkedNode(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Data_Xml_XmlNodeHandle(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlNodeHandle(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Data_Xml_XmlNodeHandle(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Data_Xml_XmlNodeHandle(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Diagnostics_ProfileEvent(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Diagnostics_ProfileEvent(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Diagnostics_ProfileEvent(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Diagnostics_ProfileEvent(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_EventHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_EventHandler(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_EventHandler(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_EventHandler(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Exception(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Exception(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Exception(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Exception(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Graphics_PolygonFace(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Graphics_PolygonFace(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Graphics_PolygonFace(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Graphics_PolygonFace(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Net_Http_HttpMessageHandlerRequest(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Net_Http_HttpMessageHandlerRequest(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Net_Http_HttpMessageHandlerRequest(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Platform_Key(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Platform_Key(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Platform_Key(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Platform_Key(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Reflection_CppField(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Reflection_CppField(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Reflection_CppField(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Reflection_CppField(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Reflection_CppFunction(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Reflection_CppFunction(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Reflection_CppFunction(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Reflection_CppFunction(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_Runtime_Implementation_Internal_FormatStringToken(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_UX_FileSource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_UX_FileSource(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_UX_FileSource(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_UX_FileSource(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_UX_IFactory(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_UX_IFactory(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_UX_IFactory(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_UX_IFactory(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_UX_ITemplate(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_UX_ITemplate(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_UX_ITemplate(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_UX_ITemplate(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__Sort__Uno_UX_Resource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    ArraySortImpl__ValidateArguments__Uno_UX_Resource(NULL, elements, index, length, comparison);

    if (length > 280)
    {
        ArraySortImpl__QuickSortInternal__Uno_UX_Resource(NULL, elements, comparison, index, index + length);
    }
    else
    {
        ArraySortImpl__ShellSortInternal__Uno_UX_Resource(NULL, elements, comparison, index, index + length);
    }
}

void ArraySortImpl__SwapInternal__byte(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uByte temp = ::uPtr< ::uArray*>(data)->Item< ::uByte>(a);
    data->Item< ::uByte>(a) = data->Item< ::uByte>(b);
    data->Item< ::uByte>(b) = temp;
}

void ArraySortImpl__SwapInternal__byte__(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uArray* temp = ::uPtr< ::uArray*>(data)->Item< ::uArray*>(a);
    data->ItemStrong< ::uArray*>(a) = data->Item< ::uArray*>(b);
    data->ItemStrong< ::uArray*>(b) = temp;
}

void ArraySortImpl__SwapInternal__char(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uChar temp = ::uPtr< ::uArray*>(data)->Item< ::uChar>(a);
    data->Item< ::uChar>(a) = data->Item< ::uChar>(b);
    data->Item< ::uChar>(b) = temp;
}

void ArraySortImpl__SwapInternal__Experimental_Cache_DiskCacheEntry(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Experimental::Cache::DiskCacheEntry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Experimental::Cache::DiskCacheEntry*>(a);
    data->ItemStrong< ::app::Experimental::Cache::DiskCacheEntry*>(a) = data->Item< ::app::Experimental::Cache::DiskCacheEntry*>(b);
    data->ItemStrong< ::app::Experimental::Cache::DiskCacheEntry*>(b) = temp;
}

void ArraySortImpl__SwapInternal__float2(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Float2 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float2>(a);
    data->Item< ::app::Uno::Float2>(a) = data->Item< ::app::Uno::Float2>(b);
    data->Item< ::app::Uno::Float2>(b) = temp;
}

void ArraySortImpl__SwapInternal__float3(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Float3 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float3>(a);
    data->Item< ::app::Uno::Float3>(a) = data->Item< ::app::Uno::Float3>(b);
    data->Item< ::app::Uno::Float3>(b) = temp;
}

void ArraySortImpl__SwapInternal__float4(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Float4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Float4>(a);
    data->Item< ::app::Uno::Float4>(a) = data->Item< ::app::Uno::Float4>(b);
    data->Item< ::app::Uno::Float4>(b) = temp;
}

void ArraySortImpl__SwapInternal__framebuffer(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Graphics::Framebuffer* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Graphics::Framebuffer*>(a);
    data->ItemStrong< ::app::Uno::Graphics::Framebuffer*>(a) = data->Item< ::app::Uno::Graphics::Framebuffer*>(b);
    data->ItemStrong< ::app::Uno::Graphics::Framebuffer*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_Animator(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::Animator* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Animator*>(a);
    data->ItemStrong< ::app::Fuse::Animations::Animator*>(a) = data->Item< ::app::Fuse::Animations::Animator*>(b);
    data->ItemStrong< ::app::Fuse::Animations::Animator*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_IMixerMaster(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_Keyframe(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::Keyframe* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::Keyframe*>(a);
    data->ItemStrong< ::app::Fuse::Animations::Keyframe*>(a) = data->Item< ::app::Fuse::Animations::Keyframe*>(b);
    data->ItemStrong< ::app::Fuse::Animations::Keyframe*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_bool_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__bool* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__bool*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__bool*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__bool*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__bool*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_char_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__char* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__char*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__char*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__char*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__char*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_double_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__double* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__double*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__double*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__double*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__double*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__float* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__float*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float2_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__float2* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float2*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float2*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__float2*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float2*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float3_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__float3* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float3*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float3*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__float3*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float3*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_float4_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__float4* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__float4*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float4*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__float4*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__float4*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Font_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Font* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Font*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Node_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Node* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Node*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Transform_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Transform* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Transform*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__int* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__int*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int2_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__int2* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int2*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int2*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__int2*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int2*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int3_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__int3* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int3*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int3*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__int3*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int3*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_int4_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__int4* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__int4*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int4*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__int4*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__int4*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_long_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__long* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__long*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__long*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__long*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__long*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_object_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__object* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__object*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__object*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__object*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__object*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_short_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__short* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__short*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__short*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__short*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__short*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_string_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__string* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__string*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__string*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__string*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__string*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_EventArgs_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Uno_EventArgs* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_EventArgs*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(a);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(a) = data->Item< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(b);
    data->ItemStrong< ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Behavior(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Behavior* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Behavior*>(a);
    data->ItemStrong< ::app::Fuse::Behavior*>(a) = data->Item< ::app::Fuse::Behavior*>(b);
    data->ItemStrong< ::app::Fuse::Behavior*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_CacheFramebuffer(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::CacheFramebuffer* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::CacheFramebuffer*>(a);
    data->ItemStrong< ::app::Fuse::CacheFramebuffer*>(a) = data->Item< ::app::Fuse::CacheFramebuffer*>(b);
    data->ItemStrong< ::app::Fuse::CacheFramebuffer*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Controls_Control(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Controls::Control* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Control*>(a);
    data->ItemStrong< ::app::Fuse::Controls::Control*>(a) = data->Item< ::app::Fuse::Controls::Control*>(b);
    data->ItemStrong< ::app::Fuse::Controls::Control*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WordWrapperWord(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Controls::Internal::WordWrapperWord* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WordWrapperWord*>(a);
    data->ItemStrong< ::app::Fuse::Controls::Internal::WordWrapperWord*>(a) = data->Item< ::app::Fuse::Controls::Internal::WordWrapperWord*>(b);
    data->ItemStrong< ::app::Fuse::Controls::Internal::WordWrapperWord*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Controls_Internal_WrappedLine(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Controls::Internal::WrappedLine* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::Internal::WrappedLine*>(a);
    data->ItemStrong< ::app::Fuse::Controls::Internal::WrappedLine*>(a) = data->Item< ::app::Fuse::Controls::Internal::WrappedLine*>(b);
    data->ItemStrong< ::app::Fuse::Controls::Internal::WrappedLine*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Controls_TextEdit_LineCacheLine(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Controls::TextEdit::LineCacheLine* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(a);
    data->ItemStrong< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(a) = data->Item< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(b);
    data->ItemStrong< ::app::Fuse::Controls::TextEdit::LineCacheLine*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Batch(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::Batching::Batch* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Batch*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::Batching::Batch*>(a) = data->Item< ::app::Fuse::Drawing::Batching::Batch*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::Batching::Batch*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_Batching_Entry(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::Batching::Entry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Batching::Entry*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::Batching::Entry*>(a) = data->Item< ::app::Fuse::Drawing::Batching::Entry*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::Batching::Entry*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_Brush(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::Brush* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Brush*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::Brush*>(a) = data->Item< ::app::Fuse::Drawing::Brush*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::Brush*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_Contour(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::Contour* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Contour*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::Contour*>(a) = data->Item< ::app::Fuse::Drawing::Contour*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::Contour*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_GradientStop(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::GradientStop* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::GradientStop*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::GradientStop*>(a) = data->Item< ::app::Fuse::Drawing::GradientStop*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::GradientStop*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_Internal_MultiBuffer_Field(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::Internal::MultiBuffer_Field* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(a) = data->Item< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::Internal::MultiBuffer_Field*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_PathGeometry(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::PathGeometry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::PathGeometry*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::PathGeometry*>(a) = data->Item< ::app::Fuse::Drawing::PathGeometry*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::PathGeometry*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Drawing_Stroke(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Drawing::Stroke* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Drawing::Stroke*>(a);
    data->ItemStrong< ::app::Fuse::Drawing::Stroke*>(a) = data->Item< ::app::Fuse::Drawing::Stroke*>(b);
    data->ItemStrong< ::app::Fuse::Drawing::Stroke*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Effects_Effect(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Effects::Effect* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Effects::Effect*>(a);
    data->ItemStrong< ::app::Fuse::Effects::Effect*>(a) = data->Item< ::app::Fuse::Effects::Effect*>(b);
    data->ItemStrong< ::app::Fuse::Effects::Effect*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Elements_Element(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Elements::Element* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::Element*>(a);
    data->ItemStrong< ::app::Fuse::Elements::Element*>(a) = data->Item< ::app::Fuse::Elements::Element*>(b);
    data->ItemStrong< ::app::Fuse::Elements::Element*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Elements_ElementAtlas(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Elements::ElementAtlas* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementAtlas*>(a);
    data->ItemStrong< ::app::Fuse::Elements::ElementAtlas*>(a) = data->Item< ::app::Fuse::Elements::ElementAtlas*>(b);
    data->ItemStrong< ::app::Fuse::Elements::ElementAtlas*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatch(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Elements::ElementBatch* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatch*>(a);
    data->ItemStrong< ::app::Fuse::Elements::ElementBatch*>(a) = data->Item< ::app::Fuse::Elements::ElementBatch*>(b);
    data->ItemStrong< ::app::Fuse::Elements::ElementBatch*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Elements_ElementBatchEntry(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Elements::ElementBatchEntry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Elements::ElementBatchEntry*>(a);
    data->ItemStrong< ::app::Fuse::Elements::ElementBatchEntry*>(a) = data->Item< ::app::Fuse::Elements::ElementBatchEntry*>(b);
    data->ItemStrong< ::app::Fuse::Elements::ElementBatchEntry*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Elements_IElementBatchDrawable(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Entities_Component(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Entities::Component* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Component*>(a);
    data->ItemStrong< ::app::Fuse::Entities::Component*>(a) = data->Item< ::app::Fuse::Entities::Component*>(b);
    data->ItemStrong< ::app::Fuse::Entities::Component*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Entities_Entity(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Entities::Entity* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entity*>(a);
    data->ItemStrong< ::app::Fuse::Entities::Entity*>(a) = data->Item< ::app::Fuse::Entities::Entity*>(b);
    data->ItemStrong< ::app::Fuse::Entities::Entity*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Entities_Entry(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Entities::Entry temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Entities::Entry>(a);
    data->Item< ::app::Fuse::Entities::Entry>(a) = data->Item< ::app::Fuse::Entities::Entry>(b);
    data->Item< ::app::Fuse::Entities::Entry>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_Capturer(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Input::Capturer* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Capturer*>(a);
    data->ItemStrong< ::app::Fuse::Input::Capturer*>(a) = data->Item< ::app::Fuse::Input::Capturer*>(b);
    data->ItemStrong< ::app::Fuse::Input::Capturer*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_FocusGainedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_FocusLostHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_IsFocusableChangedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_KeyPressedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_KeyReleasedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_Pointer_PELHolder(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Input::Pointer_PELHolder* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Input::Pointer_PELHolder*>(a);
    data->ItemStrong< ::app::Fuse::Input::Pointer_PELHolder*>(a) = data->Item< ::app::Fuse::Input::Pointer_PELHolder*>(b);
    data->ItemStrong< ::app::Fuse::Input::Pointer_PELHolder*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_PointerEnteredHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_PointerLeftHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_PointerMovedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_PointerPressedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_PointerReleasedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_PointerWheelMovedHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Input_TextEnteredHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_iOS_StatusBarConfig(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::iOS::StatusBarConfig* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::iOS::StatusBarConfig*>(a);
    data->ItemStrong< ::app::Fuse::iOS::StatusBarConfig*>(a) = data->Item< ::app::Fuse::iOS::StatusBarConfig*>(b);
    data->ItemStrong< ::app::Fuse::iOS::StatusBarConfig*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_IViewport(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Layouts_Column(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Layouts::Column* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Column*>(a);
    data->ItemStrong< ::app::Fuse::Layouts::Column*>(a) = data->Item< ::app::Fuse::Layouts::Column*>(b);
    data->ItemStrong< ::app::Fuse::Layouts::Column*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Layouts_DefinitionBase_ParseDataItem(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Layouts::DefinitionBase_ParseDataItem temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(a);
    data->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(a) = data->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(b);
    data->Item< ::app::Fuse::Layouts::DefinitionBase_ParseDataItem>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Layouts_Row(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Layouts::Row* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Layouts::Row*>(a);
    data->ItemStrong< ::app::Fuse::Layouts::Row*>(a) = data->Item< ::app::Fuse::Layouts::Row*>(b);
    data->ItemStrong< ::app::Fuse::Layouts::Row*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Navigation_INavigationAnimator(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Navigation_IPageResourceBinding(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Node(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Node* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Node*>(a);
    data->ItemStrong< ::app::Fuse::Node*>(a) = data->Item< ::app::Fuse::Node*>(b);
    data->ItemStrong< ::app::Fuse::Node*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Physics_Body(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Physics::Body* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Physics::Body*>(a);
    data->ItemStrong< ::app::Fuse::Physics::Body*>(a) = data->Item< ::app::Fuse::Physics::Body*>(b);
    data->ItemStrong< ::app::Fuse::Physics::Body*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Physics_IRule(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Reactive_Case(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Reactive::Case* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::Case*>(a);
    data->ItemStrong< ::app::Fuse::Reactive::Case*>(a) = data->Item< ::app::Fuse::Reactive::Case*>(b);
    data->ItemStrong< ::app::Fuse::Reactive::Case*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Reactive_FuseJS_Timer_Time(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Reactive::FuseJS::Timer_Time* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(a);
    data->ItemStrong< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(a) = data->Item< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(b);
    data->ItemStrong< ::app::Fuse::Reactive::FuseJS::Timer_Time*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Reactive_JavaScript(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Reactive::JavaScript* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Reactive::JavaScript*>(a);
    data->ItemStrong< ::app::Fuse::Reactive::JavaScript*>(a) = data->Item< ::app::Fuse::Reactive::JavaScript*>(b);
    data->ItemStrong< ::app::Fuse::Reactive::JavaScript*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_RenderTargetEntry(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::RenderTargetEntry* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::RenderTargetEntry*>(a);
    data->ItemStrong< ::app::Fuse::RenderTargetEntry*>(a) = data->Item< ::app::Fuse::RenderTargetEntry*>(b);
    data->ItemStrong< ::app::Fuse::RenderTargetEntry*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Resources_ImageSource(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Resources::ImageSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Resources::ImageSource*>(a);
    data->ItemStrong< ::app::Fuse::Resources::ImageSource*>(a) = data->Item< ::app::Fuse::Resources::ImageSource*>(b);
    data->ItemStrong< ::app::Fuse::Resources::ImageSource*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Resources_IMemoryResource(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Resources_ISoftDisposable(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Scripting_INameListener(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Scripting_NativeMember(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Scripting::NativeMember* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Scripting::NativeMember*>(a);
    data->ItemStrong< ::app::Fuse::Scripting::NativeMember*>(a) = data->Item< ::app::Fuse::Scripting::NativeMember*>(b);
    data->ItemStrong< ::app::Fuse::Scripting::NativeMember*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Stage(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Stage* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Stage*>(a);
    data->ItemStrong< ::app::Fuse::Stage*>(a) = data->Item< ::app::Fuse::Stage*>(b);
    data->ItemStrong< ::app::Fuse::Stage*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Style(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Style* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Style*>(a);
    data->ItemStrong< ::app::Fuse::Style*>(a) = data->Item< ::app::Fuse::Style*>(b);
    data->ItemStrong< ::app::Fuse::Style*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_StyleProperty(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::StyleProperty* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::StyleProperty*>(a);
    data->ItemStrong< ::app::Fuse::StyleProperty*>(a) = data->Item< ::app::Fuse::StyleProperty*>(b);
    data->ItemStrong< ::app::Fuse::StyleProperty*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Transform(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Transform* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Transform*>(a);
    data->ItemStrong< ::app::Fuse::Transform*>(a) = data->Item< ::app::Fuse::Transform*>(b);
    data->ItemStrong< ::app::Fuse::Transform*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Triggers_Actions_TriggerAction(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Triggers::Actions::TriggerAction* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::Actions::TriggerAction*>(a);
    data->ItemStrong< ::app::Fuse::Triggers::Actions::TriggerAction*>(a) = data->Item< ::app::Fuse::Triggers::Actions::TriggerAction*>(b);
    data->ItemStrong< ::app::Fuse::Triggers::Actions::TriggerAction*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_Triggers_State(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::Triggers::State* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::Triggers::State*>(a);
    data->ItemStrong< ::app::Fuse::Triggers::State*>(a) = data->Item< ::app::Fuse::Triggers::State*>(b);
    data->ItemStrong< ::app::Fuse::Triggers::State*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Fuse_UpdateListener(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Fuse::UpdateListener* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Fuse::UpdateListener*>(a);
    data->ItemStrong< ::app::Fuse::UpdateListener*>(a) = data->Item< ::app::Fuse::UpdateListener*>(b);
    data->ItemStrong< ::app::Fuse::UpdateListener*>(b) = temp;
}

void ArraySortImpl__SwapInternal__int(::uStatic* __this, ::uArray* data, int a, int b)
{
    int temp = ::uPtr< ::uArray*>(data)->Item< int>(a);
    data->Item< int>(a) = data->Item< int>(b);
    data->Item< int>(b) = temp;
}

void ArraySortImpl__SwapInternal__int4(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Int4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Int4>(a);
    data->Item< ::app::Uno::Int4>(a) = data->Item< ::app::Uno::Int4>(b);
    data->Item< ::app::Uno::Int4>(b) = temp;
}

void ArraySortImpl__SwapInternal__object(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Outracks::Simulator::Bytecode::TypeName* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(a);
    data->ItemStrong< ::app::Outracks::Simulator::Bytecode::TypeName*>(a) = data->Item< ::app::Outracks::Simulator::Bytecode::TypeName*>(b);
    data->ItemStrong< ::app::Outracks::Simulator::Bytecode::TypeName*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(a);
    data->ItemStrong< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(a) = data->Item< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(b);
    data->ItemStrong< ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(a);
    data->ItemStrong< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(a) = data->Item< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(b);
    data->ItemStrong< ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__*>(b) = temp;
}

void ArraySortImpl__SwapInternal__string(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uString* temp = ::uPtr< ::uArray*>(data)->Item< ::uString*>(a);
    data->ItemStrong< ::uString*>(a) = data->Item< ::uString*>(b);
    data->ItemStrong< ::uString*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Action(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_CharPunctuationChecker_PunctuationRange(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::CharPunctuationChecker_PunctuationRange* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(a);
    data->ItemStrong< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(a) = data->Item< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(b);
    data->ItemStrong< ::app::Uno::CharPunctuationChecker_PunctuationRange*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(a);
    data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(a) = data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(b);
    data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(a);
    data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(a) = data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(b);
    data->Item< ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(a);
    data->ItemStrong< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(a) = data->Item< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(b);
    data->ItemStrong< ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_ModelDrawable(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::ModelDrawable* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelDrawable*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::ModelDrawable*>(a) = data->Item< ::app::Uno::Content::Models::ModelDrawable*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::ModelDrawable*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_ModelNode(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::ModelNode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelNode*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::ModelNode*>(a) = data->Item< ::app::Uno::Content::Models::ModelNode*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::ModelNode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_ModelParameter_float4x4_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::ModelParameter__float4x4* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelParameter__float4x4*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::ModelParameter__float4x4*>(a) = data->Item< ::app::Uno::Content::Models::ModelParameter__float4x4*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::ModelParameter__float4x4*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_ModelSkin(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::ModelSkin* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::ModelSkin*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::ModelSkin*>(a) = data->Item< ::app::Uno::Content::Models::ModelSkin*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::ModelSkin*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_SkinBone(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::SkinBone* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinBone*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::SkinBone*>(a) = data->Item< ::app::Uno::Content::Models::SkinBone*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::SkinBone*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_SkinDrawable(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::SkinDrawable* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::SkinDrawable*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::SkinDrawable*>(a) = data->Item< ::app::Uno::Content::Models::SkinDrawable*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::SkinDrawable*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Models_VertexInfluence(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Models::VertexInfluence* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Models::VertexInfluence*>(a);
    data->ItemStrong< ::app::Uno::Content::Models::VertexInfluence*>(a) = data->Item< ::app::Uno::Content::Models::VertexInfluence*>(b);
    data->ItemStrong< ::app::Uno::Content::Models::VertexInfluence*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(a);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(a) = data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(b);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(a);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(a) = data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(b);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(a);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(a) = data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(b);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(a);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(a) = data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(b);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4 temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(a);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(a) = data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(b);
    data->Item< ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Data_Json_Value(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Data::Json::Value* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Json::Value*>(a);
    data->ItemStrong< ::app::Uno::Data::Json::Value*>(a) = data->Item< ::app::Uno::Data::Json::Value*>(b);
    data->ItemStrong< ::app::Uno::Data::Json::Value*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttribute(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Data::Xml::XmlAttribute* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttribute*>(a);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlAttribute*>(a) = data->Item< ::app::Uno::Data::Xml::XmlAttribute*>(b);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlAttribute*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlAttributeHandle(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Data::Xml::XmlAttributeHandle* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlAttributeHandle*>(a);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlAttributeHandle*>(a) = data->Item< ::app::Uno::Data::Xml::XmlAttributeHandle*>(b);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlAttributeHandle*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlLinkedNode(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Data::Xml::XmlLinkedNode* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlLinkedNode*>(a);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlLinkedNode*>(a) = data->Item< ::app::Uno::Data::Xml::XmlLinkedNode*>(b);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlLinkedNode*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Data_Xml_XmlNodeHandle(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Data::Xml::XmlNodeHandle* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Data::Xml::XmlNodeHandle*>(a);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlNodeHandle*>(a) = data->Item< ::app::Uno::Data::Xml::XmlNodeHandle*>(b);
    data->ItemStrong< ::app::Uno::Data::Xml::XmlNodeHandle*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Diagnostics_ProfileEvent(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Diagnostics::ProfileEvent* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Diagnostics::ProfileEvent*>(a);
    data->ItemStrong< ::app::Uno::Diagnostics::ProfileEvent*>(a) = data->Item< ::app::Uno::Diagnostics::ProfileEvent*>(b);
    data->ItemStrong< ::app::Uno::Diagnostics::ProfileEvent*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_EventHandler(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uDelegate* temp = ::uPtr< ::uArray*>(data)->Item< ::uDelegate*>(a);
    data->ItemStrong< ::uDelegate*>(a) = data->Item< ::uDelegate*>(b);
    data->ItemStrong< ::uDelegate*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Exception(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Exception* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Exception*>(a);
    data->ItemStrong< ::app::Uno::Exception*>(a) = data->Item< ::app::Uno::Exception*>(b);
    data->ItemStrong< ::app::Uno::Exception*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Graphics_PolygonFace(::uStatic* __this, ::uArray* data, int a, int b)
{
    int temp = ::uPtr< ::uArray*>(data)->Item< int>(a);
    data->Item< int>(a) = data->Item< int>(b);
    data->Item< int>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Net_Http_HttpMessageHandlerRequest(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Net::Http::HttpMessageHandlerRequest* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(a);
    data->ItemStrong< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(a) = data->Item< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(b);
    data->ItemStrong< ::app::Uno::Net::Http::HttpMessageHandlerRequest*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Platform_Key(::uStatic* __this, ::uArray* data, int a, int b)
{
    int temp = ::uPtr< ::uArray*>(data)->Item< int>(a);
    data->Item< int>(a) = data->Item< int>(b);
    data->Item< int>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Reflection_CppField(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uField* temp = ::uPtr< ::uArray*>(data)->Item< ::uField*>(a);
    data->Item< ::uField*>(a) = data->Item< ::uField*>(b);
    data->Item< ::uField*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Reflection_CppFunction(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uFunction* temp = ::uPtr< ::uArray*>(data)->Item< ::uFunction*>(a);
    data->Item< ::uFunction*>(a) = data->Item< ::uFunction*>(b);
    data->Item< ::uFunction*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_Runtime_Implementation_Internal_FormatStringToken(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::Runtime::Implementation::Internal::FormatStringToken* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(a);
    data->ItemStrong< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(a) = data->Item< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(b);
    data->ItemStrong< ::app::Uno::Runtime::Implementation::Internal::FormatStringToken*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_UX_FileSource(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::UX::FileSource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::FileSource*>(a);
    data->ItemStrong< ::app::Uno::UX::FileSource*>(a) = data->Item< ::app::Uno::UX::FileSource*>(b);
    data->ItemStrong< ::app::Uno::UX::FileSource*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_UX_IFactory(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_UX_ITemplate(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::uObject* temp = ::uPtr< ::uArray*>(data)->Item< ::uObject*>(a);
    data->ItemStrong< ::uObject*>(a) = data->Item< ::uObject*>(b);
    data->ItemStrong< ::uObject*>(b) = temp;
}

void ArraySortImpl__SwapInternal__Uno_UX_Resource(::uStatic* __this, ::uArray* data, int a, int b)
{
    ::app::Uno::UX::Resource* temp = ::uPtr< ::uArray*>(data)->Item< ::app::Uno::UX::Resource*>(a);
    data->ItemStrong< ::app::Uno::UX::Resource*>(a) = data->Item< ::app::Uno::UX::Resource*>(b);
    data->ItemStrong< ::app::Uno::UX::Resource*>(b) = temp;
}

void ArraySortImpl__ValidateArguments__byte(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__byte__(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__char(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Experimental_Cache_DiskCacheEntry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__float2(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__float3(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__float4(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__framebuffer(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_Animator(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_IMixerMaster(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_Keyframe(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_bool_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_char_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_double_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float2_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float3_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_float4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Font_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Node_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Transform_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int2_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int3_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_int4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_long_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_object_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_short_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_string_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Uno_EventArgs_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Behavior(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_CacheFramebuffer(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Controls_Control(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Controls_Internal_WordWrapperWord(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Controls_Internal_WrappedLine(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Controls_TextEdit_LineCacheLine(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_Batching_Batch(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_Batching_Entry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_Brush(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_Contour(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_GradientStop(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_Internal_MultiBuffer_Field(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_PathGeometry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Drawing_Stroke(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Effects_Effect(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Elements_Element(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Elements_ElementAtlas(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Elements_ElementBatch(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Elements_ElementBatchEntry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Elements_IElementBatchDrawable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Entities_Component(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Entities_Entity(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Entities_Entry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_Capturer(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_FocusGainedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_FocusLostHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_IsFocusableChangedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_KeyPressedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_KeyReleasedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_Pointer_PELHolder(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_PointerEnteredHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_PointerLeftHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_PointerMovedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_PointerPressedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_PointerReleasedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_PointerWheelMovedHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Input_TextEnteredHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_iOS_StatusBarConfig(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_IViewport(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Layouts_Column(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Layouts_DefinitionBase_ParseDataItem(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Layouts_Row(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Navigation_INavigationAnimator(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Navigation_IPageResourceBinding(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Node(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Physics_Body(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Physics_IRule(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Reactive_Case(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Reactive_FuseJS_Timer_Time(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Reactive_JavaScript(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_RenderTargetEntry(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Resources_ImageSource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Resources_IMemoryResource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Resources_ISoftDisposable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Scripting_INameListener(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Scripting_NativeMember(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Stage(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Style(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_StyleProperty(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Transform(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Triggers_Actions_TriggerAction(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_Triggers_State(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Fuse_UpdateListener(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__int(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__int4(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__object(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__string(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Action(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_CharPunctuationChecker_PunctuationRange(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelDrawable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelNode(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelParameter_float4x4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_ModelSkin(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_SkinBone(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_SkinDrawable(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Models_VertexInfluence(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Data_Json_Value(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlAttribute(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlAttributeHandle(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlLinkedNode(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Data_Xml_XmlNodeHandle(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Diagnostics_ProfileEvent(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_EventHandler(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Exception(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Graphics_PolygonFace(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Net_Http_HttpMessageHandlerRequest(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Platform_Key(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Reflection_CppField(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Reflection_CppFunction(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_Runtime_Implementation_Internal_FormatStringToken(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_UX_FileSource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_UX_IFactory(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_UX_ITemplate(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

void ArraySortImpl__ValidateArguments__Uno_UX_Resource(::uStatic* __this, ::uArray* elements, int index, int length, ::uDelegate* comparison)
{
    if (elements == NULL)
    {
        U_THROW(::app::Uno::ArgumentNullException__New_5(NULL, ::uGetConstString("elements")));
    }

    if (index < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("index")));
    }

    if (length < 0)
    {
        U_THROW(::app::Uno::ArgumentOutOfRangeException__New_6(NULL, ::uGetConstString("Non-negative number required."), ::uGetConstString("length")));
    }

    if (::uPtr< ::uArray*>(elements)->Length() < (index + length))
    {
        U_THROW(::app::Uno::ArgumentException__New_3(NULL, ::uGetConstString("Index and length do not specify a valid range in elements.")));
    }

    if (::app::Uno::Delegate__op_Equality(NULL, (::uDelegate*)comparison, NULL))
    {
        U_THROW(::app::Uno::InvalidOperationException__New_4(NULL, ::uGetConstString("Comparer is null.")));
    }
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

BufferImpl__uType* BufferImpl__typeof()
{
    static ::uStaticStrong<BufferImpl__uType*> type;
    if (type != NULL) return type;

    type = (BufferImpl__uType*)::uAllocClassType(sizeof(BufferImpl__uType), "Uno.Runtime.Implementation.BufferImpl");

    type->SetFunctions(16,
        ::uNewFunction("GetDouble", BufferImpl__GetDouble, 0, true, ::app::Uno::Double__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetFloat", BufferImpl__GetFloat, 0, true, ::app::Uno::Float__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetInt", BufferImpl__GetInt, 0, true, ::app::Uno::Int__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetLong", BufferImpl__GetLong, 0, true, ::app::Uno::Long__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetShort", BufferImpl__GetShort, 0, true, ::app::Uno::Short__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetUInt", BufferImpl__GetUInt, 0, true, ::app::Uno::UInt__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetULong", BufferImpl__GetULong, 0, true, ::app::Uno::ULong__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunction("GetUShort", BufferImpl__GetUShort, 0, true, ::app::Uno::UShort__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetDouble", BufferImpl__SetDouble, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Double__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetFloat", BufferImpl__SetFloat, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Float__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetInt", BufferImpl__SetInt, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetLong", BufferImpl__SetLong, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Long__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetShort", BufferImpl__SetShort, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Short__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetUInt", BufferImpl__SetUInt, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::UInt__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetULong", BufferImpl__SetULong, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::ULong__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetUShort", BufferImpl__SetUShort, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::UShort__typeof(), ::app::Uno::Bool__typeof()));

    ::uRegisterType(type);
    return type;
}

double BufferImpl__GetDouble(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<double>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

float BufferImpl__GetFloat(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<float>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

int BufferImpl__GetInt(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<int>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

::uLong BufferImpl__GetLong(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<uLong>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

::uShort BufferImpl__GetShort(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<uShort>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

::uUInt BufferImpl__GetUInt(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<uUInt>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

::uULong BufferImpl__GetULong(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<uULong>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

::uUShort BufferImpl__GetUShort(::uStatic* __this, ::uArray* buffer_, int offset_, bool littleEndian_)
{
    return uReadBytes<uUShort>((uByte*)buffer_->_ptr + offset_, littleEndian_);
}

void BufferImpl__SetDouble(::uStatic* __this, ::uArray* buffer_, int offset_, double value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetFloat(::uStatic* __this, ::uArray* buffer_, int offset_, float value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetInt(::uStatic* __this, ::uArray* buffer_, int offset_, int value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetLong(::uStatic* __this, ::uArray* buffer_, int offset_, ::uLong value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetShort(::uStatic* __this, ::uArray* buffer_, int offset_, ::uShort value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetUInt(::uStatic* __this, ::uArray* buffer_, int offset_, ::uUInt value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetULong(::uStatic* __this, ::uArray* buffer_, int offset_, ::uULong value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

void BufferImpl__SetUShort(::uStatic* __this, ::uArray* buffer_, int offset_, ::uUShort value_, bool littleEndian_)
{
    uWriteBytes((uByte*)buffer_->_ptr + offset_, value_, littleEndian_);
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

ClockImpl__uType* ClockImpl__typeof()
{
    static ::uStaticStrong<ClockImpl__uType*> type;
    if (type != NULL) return type;

    type = (ClockImpl__uType*)::uAllocClassType(sizeof(ClockImpl__uType), "Uno.Runtime.Implementation.ClockImpl");

    type->SetFunctions(3,
        ::uNewFunction("GetSeconds", ClockImpl__GetSeconds, 0, true, ::app::Uno::Double__typeof()),
        ::uNewFunction("GetTicks", ClockImpl__GetTicks, 0, true, ::app::Uno::Long__typeof()),
        ::uNewFunction("GetTimezoneOffset", ClockImpl__GetTimezoneOffset, 0, true, ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()));

    ::uRegisterType(type);
    return type;
}

double ClockImpl__GetSeconds(::uStatic* __this)
{
    return Xli::GetSeconds();
}

::uLong ClockImpl__GetTicks(::uStatic* __this)
{
    return Xli::GetTicks();
}

int ClockImpl__GetTimezoneOffset(::uStatic* __this, int year_, int month_, int day_)
{
    struct tm stm;
    stm.tm_year = year_ - 1900;
    stm.tm_mon = month_ - 1;
    stm.tm_mday = day_;
    stm.tm_hour = 0;
    stm.tm_min = 0;
    stm.tm_sec = 0;
    stm.tm_wday = 0;
    stm.tm_yday = 0;
    stm.tm_isdst = 0;
    time_t current_time = mktime(&stm);
    
    #ifdef XLI_PLATFORM_WIN32
    gmtime_s(&stm, &current_time);
    time_t utc = mktime(&stm);
    
    localtime_s(&stm, &current_time);
    time_t local = mktime(&stm);
    return (local - utc) / 60 + stm.tm_isdst * 60;
    #else
    struct tm *info;
    info = gmtime(&current_time);
    time_t utc = mktime(info);
    
    info = localtime(&current_time);
    time_t local = mktime(info);
    return (local - utc) / 60 + stm.tm_isdst * 60;
    #endif
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

DebugImpl__uType* DebugImpl__typeof()
{
    static ::uStaticStrong<DebugImpl__uType*> type;
    if (type != NULL) return type;

    type = (DebugImpl__uType*)::uAllocClassType(sizeof(DebugImpl__uType), "Uno.Runtime.Implementation.DebugImpl");

    type->SetFunctions(3,
        ::uNewFunctionVoid("Alert", DebugImpl__Alert, 0, true, ::app::Uno::String__typeof(), ::app::Uno::String__typeof(), ::app::Uno::Diagnostics::DebugMessageType__typeof()),
        ::uNewFunction("Confirm", DebugImpl__Confirm, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::String__typeof(), ::app::Uno::String__typeof(), ::app::Uno::Diagnostics::DebugMessageType__typeof()),
        ::uNewFunctionVoid("Log", DebugImpl__Log, 0, true, ::app::Uno::String__typeof(), ::app::Uno::Diagnostics::DebugMessageType__typeof()));

    ::uRegisterType(type);
    return type;
}

void DebugImpl__Alert(::uStatic* __this, ::uString* message_, ::uString* caption_, int type_)
{
    /* TODO */
}

bool DebugImpl__Confirm(::uStatic* __this, ::uString* message_, ::uString* caption_, int type_)
{
    /* TODO */
    return false;
}

void DebugImpl__Log(::uStatic* __this, ::uString* message_, int type_)
{
    Xli::PrintLine(::uStringToXliString(message_));
    Xli::Out->GetStream()->Flush();
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

DirectBuffer__uType* DirectBuffer__typeof()
{
    static ::uStaticStrong<DirectBuffer__uType*> type;
    if (type != NULL) return type;

    type = (DirectBuffer__uType*)::uAllocClassType(sizeof(DirectBuffer__uType), "Uno.Runtime.Implementation.DirectBuffer", false, 1, 1, 0);

    type->__interface_0.__fp_Dispose = (void(*)(void*))DirectBuffer__Uno_IDisposable_Dispose;

    type->SetInterfaces(
        ::app::Uno::IDisposable__typeof(), offsetof(DirectBuffer__uType, __interface_0));

    type->SetStrongRefs(
        "_dispose", offsetof(DirectBuffer, _dispose));

    type->SetFields(3,
        ::uNewField("_dispose", NULL, offsetof(DirectBuffer, _dispose), ::app::Uno::IDisposable__typeof()),
        ::uNewField("_ptr", NULL, offsetof(DirectBuffer, _ptr), ::app::Uno::IntPtr__typeof()),
        ::uNewField("_size", NULL, offsetof(DirectBuffer, _size), ::app::Uno::Long__typeof()));

    type->SetFunctions(5,
        ::uNewFunction("Create", DirectBuffer__Create, 0, true, DirectBuffer__typeof(), ::app::Uno::IntPtr__typeof(), ::app::Uno::Long__typeof()),
        ::uNewFunction("Create", DirectBuffer__Create_1, 0, true, DirectBuffer__typeof(), ::app::Uno::IntPtr__typeof(), ::app::Uno::Long__typeof(), ::app::Uno::IDisposable__typeof()),
        ::uNewFunction("get_Handle", DirectBuffer__get_Handle, 0, false, ::app::Uno::IntPtr__typeof()),
        ::uNewFunction("get_Size", DirectBuffer__get_Size, 0, false, ::app::Uno::Long__typeof()),
        ::uNewFunctionVoid("Uno.IDisposable.Dispose", DirectBuffer__Uno_IDisposable_Dispose, 0, false));

    ::uRegisterType(type);
    return type;
}

void DirectBuffer___ObjInit(DirectBuffer* __this, void* ptr, ::uLong size, ::uObject* dispose)
{
    __this->_ptr = ptr;
    __this->_size = size;
    __this->_dispose = dispose;
}

DirectBuffer* DirectBuffer__Create(::uStatic* __this, void* ptr, ::uLong size)
{
    return DirectBuffer__New_1(NULL, ptr, size, NULL);
}

DirectBuffer* DirectBuffer__Create_1(::uStatic* __this, void* ptr, ::uLong size, ::uObject* dispose)
{
    return DirectBuffer__New_1(NULL, ptr, size, dispose);
}

void* DirectBuffer__get_Handle(DirectBuffer* __this)
{
    return __this->_ptr;
}

::uLong DirectBuffer__get_Size(DirectBuffer* __this)
{
    return __this->_size;
}

DirectBuffer* DirectBuffer__New_1(::uStatic* __this, void* ptr, ::uLong size, ::uObject* dispose)
{
    DirectBuffer* inst = (DirectBuffer*)::uAllocObject(sizeof(DirectBuffer), DirectBuffer__typeof());
    inst->_ObjInit(ptr, size, dispose);
    return inst;
}

void DirectBuffer__Uno_IDisposable_Dispose(DirectBuffer* __this)
{
    if (__this->_dispose != NULL)
    {
        ::app::Uno::IDisposable::Dispose(::uPtr< ::uObject*>(__this->_dispose));
    }

    __this->_dispose = NULL;
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

GenericEqualsImpl__uType* GenericEqualsImpl__typeof()
{
    static ::uStaticStrong<GenericEqualsImpl__uType*> type;
    if (type != NULL) return type;

    type = (GenericEqualsImpl__uType*)::uAllocClassType(sizeof(GenericEqualsImpl__uType), "Uno.Runtime.Implementation.GenericEqualsImpl");

    type->SetFunctions(210,
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Android_android_view_View, 0, true, ::app::Uno::Bool__typeof(), ::app::Android::android::view::View__typeof(), ::app::Android::android::view::View__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__byte, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Byte__typeof(), ::app::Uno::Byte__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__byte__, 0, true, ::app::Uno::Bool__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::uGetArrayType(::app::Uno::Byte__typeof())),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__byte2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Byte2__typeof(), ::app::Uno::Byte2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__byte4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Byte4__typeof(), ::app::Uno::Byte4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__char, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Char__typeof(), ::app::Uno::Char__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Experimental_Cache_DiskCacheEntry, 0, true, ::app::Uno::Bool__typeof(), ::app::Experimental::Cache::DiskCacheEntry__typeof(), ::app::Experimental::Cache::DiskCacheEntry__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__float2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Float2__typeof(), ::app::Uno::Float2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__float2x2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Float2x2__typeof(), ::app::Uno::Float2x2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__float3, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Float3__typeof(), ::app::Uno::Float3__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__float3x3, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Float3x3__typeof(), ::app::Uno::Float3x3__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__float4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Float4__typeof(), ::app::Uno::Float4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__float4x4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Float4x4__typeof(), ::app::Uno::Float4x4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__framebuffer, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Graphics::Framebuffer__typeof(), ::app::Uno::Graphics::Framebuffer__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_Animator, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::Animator__typeof(), ::app::Fuse::Animations::Animator__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_IMixerMaster, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::IMixerMaster__typeof(), ::app::Fuse::Animations::IMixerMaster__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_Keyframe, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::Keyframe__typeof(), ::app::Fuse::Animations::Keyframe__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_bool_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__bool__typeof(), ::app::Fuse::Animations::MixerHandle__bool__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_char_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__char__typeof(), ::app::Fuse::Animations::MixerHandle__char__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_double_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__double__typeof(), ::app::Fuse::Animations::MixerHandle__double__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__float__typeof(), ::app::Fuse::Animations::MixerHandle__float__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float2_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__float2__typeof(), ::app::Fuse::Animations::MixerHandle__float2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float3_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__float3__typeof(), ::app::Fuse::Animations::MixerHandle__float3__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float4_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__float4__typeof(), ::app::Fuse::Animations::MixerHandle__float4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_Element_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Font_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Font__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Font__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Node_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Node__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Node__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Transform_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Transform__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Transform__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_State_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode__typeof(), ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__int__typeof(), ::app::Fuse::Animations::MixerHandle__int__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int2_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__int2__typeof(), ::app::Fuse::Animations::MixerHandle__int2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int3_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__int3__typeof(), ::app::Fuse::Animations::MixerHandle__int3__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int4_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__int4__typeof(), ::app::Fuse::Animations::MixerHandle__int4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_long_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__long__typeof(), ::app::Fuse::Animations::MixerHandle__long__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_object_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__object__typeof(), ::app::Fuse::Animations::MixerHandle__object__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_short_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__short__typeof(), ::app::Fuse::Animations::MixerHandle__short__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_string_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__string__typeof(), ::app::Fuse::Animations::MixerHandle__string__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Uno_EventArgs_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Uno_EventArgs__typeof(), ::app::Fuse::Animations::MixerHandle__Uno_EventArgs__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle__typeof(), ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Uno_UX_FileSource_, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource__typeof(), ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Behavior, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Behavior__typeof(), ::app::Fuse::Behavior__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_CacheFramebuffer, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::CacheFramebuffer__typeof(), ::app::Fuse::CacheFramebuffer__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Controls_Control, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Controls::Control__typeof(), ::app::Fuse::Controls::Control__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Controls_Internal_DefaultTextRenderer_FontKey, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Controls::Internal::DefaultTextRenderer_FontKey__typeof(), ::app::Fuse::Controls::Internal::DefaultTextRenderer_FontKey__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Controls_Internal_WordWrapperWord, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Controls::Internal::WordWrapperWord__typeof(), ::app::Fuse::Controls::Internal::WordWrapperWord__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Controls_Internal_WrappedLine, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Controls::Internal::WrappedLine__typeof(), ::app::Fuse::Controls::Internal::WrappedLine__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Controls_TextEdit_LineCacheLine, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Controls::TextEdit::LineCacheLine__typeof(), ::app::Fuse::Controls::TextEdit::LineCacheLine__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_Batching_Batch, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::Batching::Batch__typeof(), ::app::Fuse::Drawing::Batching::Batch__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_Batching_Entry, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::Batching::Entry__typeof(), ::app::Fuse::Drawing::Batching::Entry__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_Brush, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::Brush__typeof(), ::app::Fuse::Drawing::Brush__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_Contour, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::Contour__typeof(), ::app::Fuse::Drawing::Contour__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_GradientStop, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::GradientStop__typeof(), ::app::Fuse::Drawing::GradientStop__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_Internal_MultiBuffer_Field, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::Internal::MultiBuffer_Field__typeof(), ::app::Fuse::Drawing::Internal::MultiBuffer_Field__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_PathGeometry, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::PathGeometry__typeof(), ::app::Fuse::Drawing::PathGeometry__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Drawing_Stroke, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Drawing::Stroke__typeof(), ::app::Fuse::Drawing::Stroke__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Effects_Effect, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Effects::Effect__typeof(), ::app::Fuse::Effects::Effect__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Elements_Element, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Elements::Element__typeof(), ::app::Fuse::Elements::Element__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Elements_ElementAtlas, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Elements::ElementAtlas__typeof(), ::app::Fuse::Elements::ElementAtlas__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Elements_ElementBatch, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Elements::ElementBatch__typeof(), ::app::Fuse::Elements::ElementBatch__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Elements_ElementBatchEntry, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Elements::ElementBatchEntry__typeof(), ::app::Fuse::Elements::ElementBatchEntry__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Elements_IElementBatchDrawable, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Elements::IElementBatchDrawable__typeof(), ::app::Fuse::Elements::IElementBatchDrawable__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Entities_Component, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Entities::Component__typeof(), ::app::Fuse::Entities::Component__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Entities_Entity, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Entities::Entity__typeof(), ::app::Fuse::Entities::Entity__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Entities_Entry, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Entities::Entry__typeof(), ::app::Fuse::Entities::Entry__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Entities_Material, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Entities::Material__typeof(), ::app::Fuse::Entities::Material__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Entities_Mesh, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Entities::Mesh__typeof(), ::app::Fuse::Entities::Mesh__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Font, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Font__typeof(), ::app::Fuse::Font__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_IFlush, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::IFlush__typeof(), ::app::Fuse::IFlush__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_Capturer, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::Capturer__typeof(), ::app::Fuse::Input::Capturer__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_FocusGainedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::FocusGainedHandler__typeof(), ::app::Fuse::Input::FocusGainedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_FocusLostHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::FocusLostHandler__typeof(), ::app::Fuse::Input::FocusLostHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_IsFocusableChangedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::IsFocusableChangedHandler__typeof(), ::app::Fuse::Input::IsFocusableChangedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_KeyPressedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::KeyPressedHandler__typeof(), ::app::Fuse::Input::KeyPressedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_KeyReleasedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::KeyReleasedHandler__typeof(), ::app::Fuse::Input::KeyReleasedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_Pointer_PELHolder, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::Pointer_PELHolder__typeof(), ::app::Fuse::Input::Pointer_PELHolder__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_PointerEnteredHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::PointerEnteredHandler__typeof(), ::app::Fuse::Input::PointerEnteredHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_PointerLeftHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::PointerLeftHandler__typeof(), ::app::Fuse::Input::PointerLeftHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_PointerMovedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::PointerMovedHandler__typeof(), ::app::Fuse::Input::PointerMovedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_PointerPressedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::PointerPressedHandler__typeof(), ::app::Fuse::Input::PointerPressedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_PointerReleasedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::PointerReleasedHandler__typeof(), ::app::Fuse::Input::PointerReleasedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_PointerWheelMovedHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::PointerWheelMovedHandler__typeof(), ::app::Fuse::Input::PointerWheelMovedHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Input_TextEnteredHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Input::TextEnteredHandler__typeof(), ::app::Fuse::Input::TextEnteredHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_iOS_StatusBarConfig, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::iOS::StatusBarConfig__typeof(), ::app::Fuse::iOS::StatusBarConfig__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_IViewport, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::IViewport__typeof(), ::app::Fuse::IViewport__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Layouts_Column, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Layouts::Column__typeof(), ::app::Fuse::Layouts::Column__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Layouts_DefinitionBase_ParseDataItem, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Layouts::DefinitionBase_ParseDataItem__typeof(), ::app::Fuse::Layouts::DefinitionBase_ParseDataItem__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Layouts_Row, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Layouts::Row__typeof(), ::app::Fuse::Layouts::Row__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Navigation_INavigationAnimator, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Navigation::INavigationAnimator__typeof(), ::app::Fuse::Navigation::INavigationAnimator__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Navigation_IPageResourceBinding, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Navigation::IPageResourceBinding__typeof(), ::app::Fuse::Navigation::IPageResourceBinding__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Navigation_NavigationEdge, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Navigation::NavigationEdge__typeof(), ::app::Fuse::Navigation::NavigationEdge__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Node, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Node__typeof(), ::app::Fuse::Node__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Physics_Body, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Physics::Body__typeof(), ::app::Fuse::Physics::Body__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Physics_IRule, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Physics::IRule__typeof(), ::app::Fuse::Physics::IRule__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Reactive_Case, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Reactive::Case__typeof(), ::app::Fuse::Reactive::Case__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Reactive_FuseJS_Timer_Time, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Reactive::FuseJS::Timer_Time__typeof(), ::app::Fuse::Reactive::FuseJS::Timer_Time__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Reactive_JavaScript, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Reactive::JavaScript__typeof(), ::app::Fuse::Reactive::JavaScript__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_RenderTargetEntry, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::RenderTargetEntry__typeof(), ::app::Fuse::RenderTargetEntry__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Resources_ImageSource, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Resources::ImageSource__typeof(), ::app::Fuse::Resources::ImageSource__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Resources_IMemoryResource, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Resources::IMemoryResource__typeof(), ::app::Fuse::Resources::IMemoryResource__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Resources_ISoftDisposable, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Resources::ISoftDisposable__typeof(), ::app::Fuse::Resources::ISoftDisposable__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Scripting_INameListener, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Scripting::INameListener__typeof(), ::app::Fuse::Scripting::INameListener__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Scripting_NativeMember, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Scripting::NativeMember__typeof(), ::app::Fuse::Scripting::NativeMember__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Stage, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Stage__typeof(), ::app::Fuse::Stage__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Style, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Style__typeof(), ::app::Fuse::Style__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_StyleProperty, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::StyleProperty__typeof(), ::app::Fuse::StyleProperty__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Transform, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Transform__typeof(), ::app::Fuse::Transform__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Triggers_Actions_TriggerAction, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Triggers::Actions::TriggerAction__typeof(), ::app::Fuse::Triggers::Actions::TriggerAction__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_Triggers_State, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::Triggers::State__typeof(), ::app::Fuse::Triggers::State__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Fuse_UpdateListener, 0, true, ::app::Uno::Bool__typeof(), ::app::Fuse::UpdateListener__typeof(), ::app::Fuse::UpdateListener__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__HashableWeakReference, 0, true, ::app::Uno::Bool__typeof(), ::app::HashableWeakReference__typeof(), ::app::HashableWeakReference__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__int, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__int2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Int2__typeof(), ::app::Uno::Int2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__int3, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Int3__typeof(), ::app::Uno::Int3__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__int4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Int4__typeof(), ::app::Uno::Int4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__object, 0, true, ::app::Uno::Bool__typeof(), ::uObject__typeof(), ::uObject__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__object__, 0, true, ::app::Uno::Bool__typeof(), ::uGetArrayType(::uObject__typeof()), ::uGetArrayType(::uObject__typeof())),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Outracks_Simulator_Bytecode_TypeName, 0, true, ::app::Uno::Bool__typeof(), ::app::Outracks::Simulator::Bytecode::TypeName__typeof(), ::app::Outracks::Simulator::Bytecode::TypeName__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Outracks_Simulator_Bytecode_Variable, 0, true, ::app::Uno::Bool__typeof(), ::app::Outracks::Simulator::Bytecode::Variable__typeof(), ::app::Outracks::Simulator::Bytecode::Variable__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Outracks_Simulator_Protocol_MessageFromClient, 0, true, ::app::Uno::Bool__typeof(), ::app::Outracks::Simulator::Protocol::MessageFromClient__typeof(), ::app::Outracks::Simulator::Protocol::MessageFromClient__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Outracks_Simulator_Protocol_MessageToClient, 0, true, ::app::Uno::Bool__typeof(), ::app::Outracks::Simulator::Protocol::MessageToClient__typeof(), ::app::Outracks::Simulator::Protocol::MessageToClient__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_, 0, true, ::app::Uno::Bool__typeof(), ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient__typeof(), ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Outracks_Simulator_Task_Uno_Net_IPEndPoint___, 0, true, ::app::Uno::Bool__typeof(), ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint____typeof(), ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint____typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__sbyte2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::SByte2__typeof(), ::app::Uno::SByte2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__sbyte4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::SByte4__typeof(), ::app::Uno::SByte4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__short2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Short2__typeof(), ::app::Uno::Short2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__short4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Short4__typeof(), ::app::Uno::Short4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__string, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::String__typeof(), ::app::Uno::String__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Action, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Action__typeof(), ::app::Uno::Action__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Action_bool_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Action__bool__typeof(), ::app::Uno::Action__bool__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Action_Fuse_Camera_PictureResult_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Action__Fuse_Camera_PictureResult__typeof(), ::app::Uno::Action__Fuse_Camera_PictureResult__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Action_string_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Action__string__typeof(), ::app::Uno::Action__string__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Action_Uno_Exception_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Action__Uno_Exception__typeof(), ::app::Uno::Action__Uno_Exception__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_CharPunctuationChecker_PunctuationRange, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::CharPunctuationChecker_PunctuationRange__typeof(), ::app::Uno::CharPunctuationChecker_PunctuationRange__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster__typeof(), ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler__typeof(), ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type__typeof(), ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Fonts_BitmapFont_CharPair, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Fonts::BitmapFont_CharPair__typeof(), ::app::Uno::Content::Fonts::BitmapFont_CharPair__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_ModelDrawable, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::ModelDrawable__typeof(), ::app::Uno::Content::Models::ModelDrawable__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_ModelNode, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::ModelNode__typeof(), ::app::Uno::Content::Models::ModelNode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_ModelParameter_float4x4_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::ModelParameter__float4x4__typeof(), ::app::Uno::Content::Models::ModelParameter__float4x4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_ModelSkin, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::ModelSkin__typeof(), ::app::Uno::Content::Models::ModelSkin__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_SkinBone, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::SkinBone__typeof(), ::app::Uno::Content::Models::SkinBone__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_SkinDrawable, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::SkinDrawable__typeof(), ::app::Uno::Content::Models::SkinDrawable__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Models_VertexInfluence, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Models::VertexInfluence__typeof(), ::app::Uno::Content::Models::VertexInfluence__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float_float_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4__typeof(), ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Data_Json_Value, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Data::Json::Value__typeof(), ::app::Uno::Data::Json::Value__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Data_Xml_XmlAttribute, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Data::Xml::XmlAttribute__typeof(), ::app::Uno::Data::Xml::XmlAttribute__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Data_Xml_XmlAttributeHandle, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Data::Xml::XmlAttributeHandle__typeof(), ::app::Uno::Data::Xml::XmlAttributeHandle__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Data_Xml_XmlLinkedNode, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Data::Xml::XmlLinkedNode__typeof(), ::app::Uno::Data::Xml::XmlLinkedNode__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Data_Xml_XmlNodeHandle, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Data::Xml::XmlNodeHandle__typeof(), ::app::Uno::Data::Xml::XmlNodeHandle__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Diagnostics_ProfileEvent, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Diagnostics::ProfileEvent__typeof(), ::app::Uno::Diagnostics::ProfileEvent__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_EventHandler, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::EventHandler__typeof(), ::app::Uno::EventHandler__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Exception, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Exception__typeof(), ::app::Uno::Exception__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Graphics_PolygonFace, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Graphics::PolygonFace__typeof(), ::app::Uno::Graphics::PolygonFace__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Net_Http_HttpMessageHandlerRequest, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Net::Http::HttpMessageHandlerRequest__typeof(), ::app::Uno::Net::Http::HttpMessageHandlerRequest__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Platform_Key, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Platform::Key__typeof(), ::app::Uno::Platform::Key__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Reflection_CppField, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Reflection::CppField__typeof(), ::app::Uno::Reflection::CppField__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Reflection_CppFunction, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Reflection::CppFunction__typeof(), ::app::Uno::Reflection::CppFunction__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Runtime_Implementation_Internal_FormatStringToken, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::Internal::FormatStringToken__typeof(), ::app::Uno::Runtime::Implementation::Internal::FormatStringToken__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Threading_Promise_bool_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Threading::Promise__bool__typeof(), ::app::Uno::Threading::Promise__bool__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Threading_Promise_Fuse_Camera_PictureResult_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Threading::Promise__Fuse_Camera_PictureResult__typeof(), ::app::Uno::Threading::Promise__Fuse_Camera_PictureResult__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Threading_Promise_string_, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Threading::Promise__string__typeof(), ::app::Uno::Threading::Promise__string__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_Type, 0, true, ::app::Uno::Bool__typeof(), ::uType__typeof(), ::uType__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_UX_FileSource, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::UX::FileSource__typeof(), ::app::Uno::UX::FileSource__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_UX_IFactory, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::UX::IFactory__typeof(), ::app::Uno::UX::IFactory__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_UX_ITemplate, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::UX::ITemplate__typeof(), ::app::Uno::UX::ITemplate__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__Uno_UX_Resource, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::UX::Resource__typeof(), ::app::Uno::UX::Resource__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__ushort2, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::UShort2__typeof(), ::app::Uno::UShort2__typeof()),
        ::uNewFunction("Equals", GenericEqualsImpl__Equals__ushort4, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::UShort4__typeof(), ::app::Uno::UShort4__typeof()));

    ::uRegisterType(type);
    return type;
}

bool GenericEqualsImpl__Equals__Android_android_view_View(::uStatic* __this, ::app::Android::android::view::View* left_, ::app::Android::android::view::View* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__byte(::uStatic* __this, ::uByte left_, ::uByte right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__byte__(::uStatic* __this, ::uArray* left_, ::uArray* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__byte2(::uStatic* __this, ::app::Uno::Byte2 left_, ::app::Uno::Byte2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__byte4(::uStatic* __this, ::app::Uno::Byte4 left_, ::app::Uno::Byte4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__char(::uStatic* __this, ::uChar left_, ::uChar right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Experimental_Cache_DiskCacheEntry(::uStatic* __this, ::app::Experimental::Cache::DiskCacheEntry* left_, ::app::Experimental::Cache::DiskCacheEntry* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__float2(::uStatic* __this, ::app::Uno::Float2 left_, ::app::Uno::Float2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__float2x2(::uStatic* __this, ::app::Uno::Float2x2 left_, ::app::Uno::Float2x2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__float3(::uStatic* __this, ::app::Uno::Float3 left_, ::app::Uno::Float3 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__float3x3(::uStatic* __this, ::app::Uno::Float3x3 left_, ::app::Uno::Float3x3 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__float4(::uStatic* __this, ::app::Uno::Float4 left_, ::app::Uno::Float4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__float4x4(::uStatic* __this, ::app::Uno::Float4x4 left_, ::app::Uno::Float4x4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__framebuffer(::uStatic* __this, ::app::Uno::Graphics::Framebuffer* left_, ::app::Uno::Graphics::Framebuffer* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_Animator(::uStatic* __this, ::app::Fuse::Animations::Animator* left_, ::app::Fuse::Animations::Animator* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_IMixerMaster(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_Keyframe(::uStatic* __this, ::app::Fuse::Animations::Keyframe* left_, ::app::Fuse::Animations::Keyframe* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_bool_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__bool* left_, ::app::Fuse::Animations::MixerHandle__bool* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_char_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__char* left_, ::app::Fuse::Animations::MixerHandle__char* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_double_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__double* left_, ::app::Fuse::Animations::MixerHandle__double* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__float* left_, ::app::Fuse::Animations::MixerHandle__float* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float2_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__float2* left_, ::app::Fuse::Animations::MixerHandle__float2* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float3_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__float3* left_, ::app::Fuse::Animations::MixerHandle__float3* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_float4_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__float4* left_, ::app::Fuse::Animations::MixerHandle__float4* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_AnimationVariant_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_AnimationVariant* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_Easing_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_Easing* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_KeyframeInterpolation_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_KeyframeInterpolation* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Animations_MixOp_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Animations_MixOp* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_BlendMode_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_BlendMode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_Brush_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_Brush* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_DynamicBrush_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_DynamicBrush* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_GradientStop_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_GradientStop* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_LinearGradient_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_LinearGradient* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_SolidColor_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_SolidColor* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Drawing_StaticBrush_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Drawing_StaticBrush* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_Alignment_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Alignment* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_CachingMode_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_CachingMode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_Element_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Element* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_HitTestMode_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_HitTestMode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_SizeUnit_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_SizeUnit* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_StretchDirection_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchDirection* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_StretchMode_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchMode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_StretchSizing_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_StretchSizing* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_TextAlignment_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextAlignment* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_TextWrapping_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_TextWrapping* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Elements_Visibility_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Elements_Visibility* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Font_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Font* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Font* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Gestures_Edge_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_Edge* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Gestures_ScrollDirections_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Gestures_ScrollDirections* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_Dock_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Dock* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_FlowDirection_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_FlowDirection* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_Metric_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Metric* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Layouts_Orientation_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Layouts_Orientation* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationDirection_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationDirection* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationEdge_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationEdge* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_NavigationGotoMode_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_NavigationGotoMode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_SnapTo_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SnapTo* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeDirection_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeDirection* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Navigation_SwipeEnds_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Navigation_SwipeEnds* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Node_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Node* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Node* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Resources_ImageSource_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Resources_ImageSource* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Transform_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Transform* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Transform* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_Actions_TriggerDirection_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_Actions_TriggerDirection* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_State_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_State* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_StateTransition_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_StateTransition* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Fuse_Triggers_TriggerBypassMode_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode* left_, ::app::Fuse::Animations::MixerHandle__Fuse_Triggers_TriggerBypassMode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__int* left_, ::app::Fuse::Animations::MixerHandle__int* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int2_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__int2* left_, ::app::Fuse::Animations::MixerHandle__int2* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int3_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__int3* left_, ::app::Fuse::Animations::MixerHandle__int3* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_int4_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__int4* left_, ::app::Fuse::Animations::MixerHandle__int4* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_long_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__long* left_, ::app::Fuse::Animations::MixerHandle__long* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_object_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__object* left_, ::app::Fuse::Animations::MixerHandle__object* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_short_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__short* left_, ::app::Fuse::Animations::MixerHandle__short* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_string_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__string* left_, ::app::Fuse::Animations::MixerHandle__string* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Uno_EventArgs_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Uno_EventArgs* left_, ::app::Fuse::Animations::MixerHandle__Uno_EventArgs* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Uno_Platform_iOS_StatusBarStyle_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle* left_, ::app::Fuse::Animations::MixerHandle__Uno_Platform_iOS_StatusBarStyle* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Animations_MixerHandle_Uno_UX_FileSource_(::uStatic* __this, ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource* left_, ::app::Fuse::Animations::MixerHandle__Uno_UX_FileSource* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Behavior(::uStatic* __this, ::app::Fuse::Behavior* left_, ::app::Fuse::Behavior* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_CacheFramebuffer(::uStatic* __this, ::app::Fuse::CacheFramebuffer* left_, ::app::Fuse::CacheFramebuffer* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Controls_Control(::uStatic* __this, ::app::Fuse::Controls::Control* left_, ::app::Fuse::Controls::Control* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Controls_Internal_DefaultTextRenderer_FontKey(::uStatic* __this, ::app::Fuse::Controls::Internal::DefaultTextRenderer_FontKey* left_, ::app::Fuse::Controls::Internal::DefaultTextRenderer_FontKey* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Controls_Internal_WordWrapperWord(::uStatic* __this, ::app::Fuse::Controls::Internal::WordWrapperWord* left_, ::app::Fuse::Controls::Internal::WordWrapperWord* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Controls_Internal_WrappedLine(::uStatic* __this, ::app::Fuse::Controls::Internal::WrappedLine* left_, ::app::Fuse::Controls::Internal::WrappedLine* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Controls_TextEdit_LineCacheLine(::uStatic* __this, ::app::Fuse::Controls::TextEdit::LineCacheLine* left_, ::app::Fuse::Controls::TextEdit::LineCacheLine* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_Batching_Batch(::uStatic* __this, ::app::Fuse::Drawing::Batching::Batch* left_, ::app::Fuse::Drawing::Batching::Batch* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_Batching_Entry(::uStatic* __this, ::app::Fuse::Drawing::Batching::Entry* left_, ::app::Fuse::Drawing::Batching::Entry* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_Brush(::uStatic* __this, ::app::Fuse::Drawing::Brush* left_, ::app::Fuse::Drawing::Brush* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_Contour(::uStatic* __this, ::app::Fuse::Drawing::Contour* left_, ::app::Fuse::Drawing::Contour* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_GradientStop(::uStatic* __this, ::app::Fuse::Drawing::GradientStop* left_, ::app::Fuse::Drawing::GradientStop* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_Internal_MultiBuffer_Field(::uStatic* __this, ::app::Fuse::Drawing::Internal::MultiBuffer_Field* left_, ::app::Fuse::Drawing::Internal::MultiBuffer_Field* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_PathGeometry(::uStatic* __this, ::app::Fuse::Drawing::PathGeometry* left_, ::app::Fuse::Drawing::PathGeometry* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Drawing_Stroke(::uStatic* __this, ::app::Fuse::Drawing::Stroke* left_, ::app::Fuse::Drawing::Stroke* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Effects_Effect(::uStatic* __this, ::app::Fuse::Effects::Effect* left_, ::app::Fuse::Effects::Effect* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Elements_Element(::uStatic* __this, ::app::Fuse::Elements::Element* left_, ::app::Fuse::Elements::Element* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Elements_ElementAtlas(::uStatic* __this, ::app::Fuse::Elements::ElementAtlas* left_, ::app::Fuse::Elements::ElementAtlas* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Elements_ElementBatch(::uStatic* __this, ::app::Fuse::Elements::ElementBatch* left_, ::app::Fuse::Elements::ElementBatch* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Elements_ElementBatchEntry(::uStatic* __this, ::app::Fuse::Elements::ElementBatchEntry* left_, ::app::Fuse::Elements::ElementBatchEntry* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Elements_IElementBatchDrawable(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Entities_Component(::uStatic* __this, ::app::Fuse::Entities::Component* left_, ::app::Fuse::Entities::Component* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Entities_Entity(::uStatic* __this, ::app::Fuse::Entities::Entity* left_, ::app::Fuse::Entities::Entity* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Entities_Entry(::uStatic* __this, ::app::Fuse::Entities::Entry left_, ::app::Fuse::Entities::Entry right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Entities_Material(::uStatic* __this, ::app::Fuse::Entities::Material* left_, ::app::Fuse::Entities::Material* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Entities_Mesh(::uStatic* __this, ::app::Fuse::Entities::Mesh* left_, ::app::Fuse::Entities::Mesh* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Font(::uStatic* __this, ::app::Fuse::Font* left_, ::app::Fuse::Font* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_IFlush(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_Capturer(::uStatic* __this, ::app::Fuse::Input::Capturer* left_, ::app::Fuse::Input::Capturer* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_FocusGainedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_FocusLostHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_IsFocusableChangedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_KeyPressedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_KeyReleasedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_Pointer_PELHolder(::uStatic* __this, ::app::Fuse::Input::Pointer_PELHolder* left_, ::app::Fuse::Input::Pointer_PELHolder* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_PointerEnteredHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_PointerLeftHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_PointerMovedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_PointerPressedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_PointerReleasedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_PointerWheelMovedHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Input_TextEnteredHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_iOS_StatusBarConfig(::uStatic* __this, ::app::Fuse::iOS::StatusBarConfig* left_, ::app::Fuse::iOS::StatusBarConfig* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_IViewport(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Layouts_Column(::uStatic* __this, ::app::Fuse::Layouts::Column* left_, ::app::Fuse::Layouts::Column* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Layouts_DefinitionBase_ParseDataItem(::uStatic* __this, ::app::Fuse::Layouts::DefinitionBase_ParseDataItem left_, ::app::Fuse::Layouts::DefinitionBase_ParseDataItem right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Layouts_Row(::uStatic* __this, ::app::Fuse::Layouts::Row* left_, ::app::Fuse::Layouts::Row* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Navigation_INavigationAnimator(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Navigation_IPageResourceBinding(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Navigation_NavigationEdge(::uStatic* __this, int left_, int right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Node(::uStatic* __this, ::app::Fuse::Node* left_, ::app::Fuse::Node* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Physics_Body(::uStatic* __this, ::app::Fuse::Physics::Body* left_, ::app::Fuse::Physics::Body* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Physics_IRule(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Reactive_Case(::uStatic* __this, ::app::Fuse::Reactive::Case* left_, ::app::Fuse::Reactive::Case* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Reactive_FuseJS_Timer_Time(::uStatic* __this, ::app::Fuse::Reactive::FuseJS::Timer_Time* left_, ::app::Fuse::Reactive::FuseJS::Timer_Time* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Reactive_JavaScript(::uStatic* __this, ::app::Fuse::Reactive::JavaScript* left_, ::app::Fuse::Reactive::JavaScript* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_RenderTargetEntry(::uStatic* __this, ::app::Fuse::RenderTargetEntry* left_, ::app::Fuse::RenderTargetEntry* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Resources_ImageSource(::uStatic* __this, ::app::Fuse::Resources::ImageSource* left_, ::app::Fuse::Resources::ImageSource* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Resources_IMemoryResource(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Resources_ISoftDisposable(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Scripting_INameListener(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Scripting_NativeMember(::uStatic* __this, ::app::Fuse::Scripting::NativeMember* left_, ::app::Fuse::Scripting::NativeMember* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Stage(::uStatic* __this, ::app::Fuse::Stage* left_, ::app::Fuse::Stage* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Style(::uStatic* __this, ::app::Fuse::Style* left_, ::app::Fuse::Style* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_StyleProperty(::uStatic* __this, ::app::Fuse::StyleProperty* left_, ::app::Fuse::StyleProperty* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Transform(::uStatic* __this, ::app::Fuse::Transform* left_, ::app::Fuse::Transform* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Triggers_Actions_TriggerAction(::uStatic* __this, ::app::Fuse::Triggers::Actions::TriggerAction* left_, ::app::Fuse::Triggers::Actions::TriggerAction* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_Triggers_State(::uStatic* __this, ::app::Fuse::Triggers::State* left_, ::app::Fuse::Triggers::State* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Fuse_UpdateListener(::uStatic* __this, ::app::Fuse::UpdateListener* left_, ::app::Fuse::UpdateListener* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__HashableWeakReference(::uStatic* __this, ::app::HashableWeakReference* left_, ::app::HashableWeakReference* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__int(::uStatic* __this, int left_, int right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__int2(::uStatic* __this, ::app::Uno::Int2 left_, ::app::Uno::Int2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__int3(::uStatic* __this, ::app::Uno::Int3 left_, ::app::Uno::Int3 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__int4(::uStatic* __this, ::app::Uno::Int4 left_, ::app::Uno::Int4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__object(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__object__(::uStatic* __this, ::uArray* left_, ::uArray* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Outracks_Simulator_Bytecode_TypeName(::uStatic* __this, ::app::Outracks::Simulator::Bytecode::TypeName* left_, ::app::Outracks::Simulator::Bytecode::TypeName* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Outracks_Simulator_Bytecode_Variable(::uStatic* __this, ::app::Outracks::Simulator::Bytecode::Variable* left_, ::app::Outracks::Simulator::Bytecode::Variable* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Outracks_Simulator_Protocol_MessageFromClient(::uStatic* __this, ::app::Outracks::Simulator::Protocol::MessageFromClient* left_, ::app::Outracks::Simulator::Protocol::MessageFromClient* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Outracks_Simulator_Protocol_MessageToClient(::uStatic* __this, ::app::Outracks::Simulator::Protocol::MessageToClient* left_, ::app::Outracks::Simulator::Protocol::MessageToClient* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Outracks_Simulator_Task_Outracks_Simulator_ISimulatorClient_(::uStatic* __this, ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient* left_, ::app::Outracks::Simulator::Task__Outracks_Simulator_ISimulatorClient* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Outracks_Simulator_Task_Uno_Net_IPEndPoint___(::uStatic* __this, ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__* left_, ::app::Outracks::Simulator::Task__Uno_Net_IPEndPoint__* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__sbyte2(::uStatic* __this, ::app::Uno::SByte2 left_, ::app::Uno::SByte2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__sbyte4(::uStatic* __this, ::app::Uno::SByte4 left_, ::app::Uno::SByte4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__short2(::uStatic* __this, ::app::Uno::Short2 left_, ::app::Uno::Short2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__short4(::uStatic* __this, ::app::Uno::Short4 left_, ::app::Uno::Short4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__string(::uStatic* __this, ::uString* left_, ::uString* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Action(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Action_bool_(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Action_Fuse_Camera_PictureResult_(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Action_string_(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Action_Uno_Exception_(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_CharPunctuationChecker_PunctuationRange(::uStatic* __this, ::app::Uno::CharPunctuationChecker_PunctuationRange* left_, ::app::Uno::CharPunctuationChecker_PunctuationRange* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Collections_ConcurrentCollection1_ModItem_Fuse_Animations_IMixerMaster_(::uStatic* __this, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster left_, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Fuse_Animations_IMixerMaster right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Collections_ConcurrentCollection1_ModItem_Uno_EventHandler_(::uStatic* __this, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler left_, ::app::Uno::Collections::ConcurrentCollection1_ModItem__Uno_EventHandler right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Collections_Dictionary_Outracks_Simulator_Bytecode_TypeName_Uno_Type_(::uStatic* __this, ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type* left_, ::app::Uno::Collections::Dictionary__Outracks_Simulator_Bytecode_TypeName__Uno_Type* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Fonts_BitmapFont_CharPair(::uStatic* __this, ::app::Uno::Content::Fonts::BitmapFont_CharPair left_, ::app::Uno::Content::Fonts::BitmapFont_CharPair right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_ModelDrawable(::uStatic* __this, ::app::Uno::Content::Models::ModelDrawable* left_, ::app::Uno::Content::Models::ModelDrawable* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_ModelNode(::uStatic* __this, ::app::Uno::Content::Models::ModelNode* left_, ::app::Uno::Content::Models::ModelNode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_ModelParameter_float4x4_(::uStatic* __this, ::app::Uno::Content::Models::ModelParameter__float4x4* left_, ::app::Uno::Content::Models::ModelParameter__float4x4* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_ModelSkin(::uStatic* __this, ::app::Uno::Content::Models::ModelSkin* left_, ::app::Uno::Content::Models::ModelSkin* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_SkinBone(::uStatic* __this, ::app::Uno::Content::Models::SkinBone* left_, ::app::Uno::Content::Models::SkinBone* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_SkinDrawable(::uStatic* __this, ::app::Uno::Content::Models::SkinDrawable* left_, ::app::Uno::Content::Models::SkinDrawable* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Models_VertexInfluence(::uStatic* __this, ::app::Uno::Content::Models::VertexInfluence* left_, ::app::Uno::Content::Models::VertexInfluence* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float_float_(::uStatic* __this, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float left_, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float__float right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float2_float2_(::uStatic* __this, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2 left_, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float2__float2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float3_float3_(::uStatic* __this, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3 left_, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float3__float3 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float4_float4_(::uStatic* __this, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4 left_, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4__float4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Content_Splines_KeyframedSpline2_Key_float4x4_float4x4_(::uStatic* __this, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4 left_, ::app::Uno::Content::Splines::KeyframedSpline2_Key__float4x4__float4x4 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Data_Json_Value(::uStatic* __this, ::app::Uno::Data::Json::Value* left_, ::app::Uno::Data::Json::Value* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Data_Xml_XmlAttribute(::uStatic* __this, ::app::Uno::Data::Xml::XmlAttribute* left_, ::app::Uno::Data::Xml::XmlAttribute* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Data_Xml_XmlAttributeHandle(::uStatic* __this, ::app::Uno::Data::Xml::XmlAttributeHandle* left_, ::app::Uno::Data::Xml::XmlAttributeHandle* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Data_Xml_XmlLinkedNode(::uStatic* __this, ::app::Uno::Data::Xml::XmlLinkedNode* left_, ::app::Uno::Data::Xml::XmlLinkedNode* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Data_Xml_XmlNodeHandle(::uStatic* __this, ::app::Uno::Data::Xml::XmlNodeHandle* left_, ::app::Uno::Data::Xml::XmlNodeHandle* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Diagnostics_ProfileEvent(::uStatic* __this, ::app::Uno::Diagnostics::ProfileEvent* left_, ::app::Uno::Diagnostics::ProfileEvent* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_EventHandler(::uStatic* __this, ::uDelegate* left_, ::uDelegate* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Exception(::uStatic* __this, ::app::Uno::Exception* left_, ::app::Uno::Exception* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Graphics_PolygonFace(::uStatic* __this, int left_, int right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Net_Http_HttpMessageHandlerRequest(::uStatic* __this, ::app::Uno::Net::Http::HttpMessageHandlerRequest* left_, ::app::Uno::Net::Http::HttpMessageHandlerRequest* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Platform_Key(::uStatic* __this, int left_, int right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Reflection_CppField(::uStatic* __this, ::uField* left_, ::uField* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Reflection_CppFunction(::uStatic* __this, ::uFunction* left_, ::uFunction* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Runtime_Implementation_Internal_FormatStringToken(::uStatic* __this, ::app::Uno::Runtime::Implementation::Internal::FormatStringToken* left_, ::app::Uno::Runtime::Implementation::Internal::FormatStringToken* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Threading_Promise_bool_(::uStatic* __this, ::app::Uno::Threading::Promise__bool* left_, ::app::Uno::Threading::Promise__bool* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Threading_Promise_Fuse_Camera_PictureResult_(::uStatic* __this, ::app::Uno::Threading::Promise__Fuse_Camera_PictureResult* left_, ::app::Uno::Threading::Promise__Fuse_Camera_PictureResult* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Threading_Promise_string_(::uStatic* __this, ::app::Uno::Threading::Promise__string* left_, ::app::Uno::Threading::Promise__string* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_Type(::uStatic* __this, ::uType* left_, ::uType* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_UX_FileSource(::uStatic* __this, ::app::Uno::UX::FileSource* left_, ::app::Uno::UX::FileSource* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_UX_IFactory(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_UX_ITemplate(::uStatic* __this, ::uObject* left_, ::uObject* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__Uno_UX_Resource(::uStatic* __this, ::app::Uno::UX::Resource* left_, ::app::Uno::UX::Resource* right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__ushort2(::uStatic* __this, ::app::Uno::UShort2 left_, ::app::Uno::UShort2 right_)
{
    return ::uGenericEquals(left_, right_);
}

bool GenericEqualsImpl__Equals__ushort4(::uStatic* __this, ::app::Uno::UShort4 left_, ::app::Uno::UShort4 right_)
{
    return ::uGenericEquals(left_, right_);
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

GraphicsContextHandle__uType* GraphicsContextHandle__typeof()
{
    static ::uStaticStrong<GraphicsContextHandle__uType*> type;
    if (type != NULL) return type;

    type = (GraphicsContextHandle__uType*)::uAllocStructType(sizeof(GraphicsContextHandle__uType), "Uno.Runtime.Implementation.GraphicsContextHandle", sizeof(::uGraphicsContext), 0, 0, 0);

    ::uRegisterType(type);
    return type;
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

GraphicsContextImpl__uType* GraphicsContextImpl__typeof()
{
    static ::uStaticStrong<GraphicsContextImpl__uType*> type;
    if (type != NULL) return type;

    type = (GraphicsContextImpl__uType*)::uAllocClassType(sizeof(GraphicsContextImpl__uType), "Uno.Runtime.Implementation.GraphicsContextImpl");

    type->SetFunctions(6,
        ::uNewFunction("GetBackbufferGLHandle", GraphicsContextImpl__GetBackbufferGLHandle, 0, true, ::app::OpenGL::GLFramebufferHandle__typeof(), ::app::Uno::Runtime::Implementation::GraphicsContextHandle__typeof()),
        ::uNewFunction("GetBackbufferOffset", GraphicsContextImpl__GetBackbufferOffset, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::GraphicsContextHandle__typeof()),
        ::uNewFunction("GetBackbufferScissor", GraphicsContextImpl__GetBackbufferScissor, 0, true, ::app::Uno::Recti__typeof(), ::app::Uno::Runtime::Implementation::GraphicsContextHandle__typeof()),
        ::uNewFunction("GetBackbufferSize", GraphicsContextImpl__GetBackbufferSize, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::GraphicsContextHandle__typeof()),
        ::uNewFunction("GetInstance", GraphicsContextImpl__GetInstance, 0, true, ::app::Uno::Runtime::Implementation::GraphicsContextHandle__typeof()),
        ::uNewFunction("GetRealBackbufferHeight", GraphicsContextImpl__GetRealBackbufferHeight, 0, true, ::app::Uno::Int__typeof(), ::app::Uno::Runtime::Implementation::GraphicsContextHandle__typeof()));

    ::uRegisterType(type);
    return type;
}

::uUInt GraphicsContextImpl__GetBackbufferGLHandle(::uStatic* __this, ::uGraphicsContext handle_)
{
    return handle_.GetBackbufferGLHandle();
}

::app::Uno::Int2 GraphicsContextImpl__GetBackbufferOffset(::uStatic* __this, ::uGraphicsContext handle)
{
    return ::app::Uno::Int2__New_2(NULL, 0, 0);
}

::app::Uno::Recti GraphicsContextImpl__GetBackbufferScissor(::uStatic* __this, ::uGraphicsContext handle)
{
    return ::app::Uno::Recti__New_2(NULL, GraphicsContextImpl__GetBackbufferOffset(NULL, handle), GraphicsContextImpl__GetBackbufferSize(NULL, handle));
}

::app::Uno::Int2 GraphicsContextImpl__GetBackbufferSize(::uStatic* __this, ::uGraphicsContext handle)
{
    {
        ::app::Uno::Float2 size = ::uPtr< ::app::Uno::Platform2::Display*>(::app::Uno::Platform2::Display__get_MainDisplay(NULL))->Frame().Size();
        return ::app::Uno::Int2__New_2(NULL, (int)size.X, (int)size.Y);
    }
}

::uGraphicsContext GraphicsContextImpl__GetInstance(::uStatic* __this)
{
    return uGraphicsContext::GetInstance();
}

int GraphicsContextImpl__GetRealBackbufferHeight(::uStatic* __this, ::uGraphicsContext handle)
{
    return GraphicsContextImpl__GetBackbufferSize(NULL, handle).Y;
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

PlatformWindowHandle__uType* PlatformWindowHandle__typeof()
{
    static ::uStaticStrong<PlatformWindowHandle__uType*> type;
    if (type != NULL) return type;

    type = (PlatformWindowHandle__uType*)::uAllocStructType(sizeof(PlatformWindowHandle__uType), "Uno.Runtime.Implementation.PlatformWindowHandle", sizeof(::Xli::Window*), 0, 0, 0);

    ::uRegisterType(type);
    return type;
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

::app::Uno::Rect PlatformWindowImpl__keyboardFrame;
bool PlatformWindowImpl__keyboardVisible;

PlatformWindowImpl__uType* PlatformWindowImpl__typeof()
{
    static ::uStaticStrong<PlatformWindowImpl__uType*> type;
    if (type != NULL) return type;

    type = (PlatformWindowImpl__uType*)::uAllocClassType(sizeof(PlatformWindowImpl__uType), "Uno.Runtime.Implementation.PlatformWindowImpl");

    type->SetFields(2,
        ::uNewField("keyboardFrame", &PlatformWindowImpl__keyboardFrame, 0, ::app::Uno::Rect__typeof()),
        ::uNewField("keyboardVisible", &PlatformWindowImpl__keyboardVisible, 0, ::app::Uno::Bool__typeof()));

    type->SetFunctions(23,
        ::uNewFunctionVoid("Close", PlatformWindowImpl__Close, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetClientSize", PlatformWindowImpl__GetClientSize, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetDensity", PlatformWindowImpl__GetDensity, 0, true, ::app::Uno::Float__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetFullscreen", PlatformWindowImpl__GetFullscreen, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetInstance", PlatformWindowImpl__GetInstance, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetKeyState", PlatformWindowImpl__GetKeyState, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::Platform::Key__typeof()),
        ::uNewFunction("GetMouseButtonState", PlatformWindowImpl__GetMouseButtonState, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::Platform::MouseButton__typeof()),
        ::uNewFunction("GetOnscreenKeyboardPosition", PlatformWindowImpl__GetOnscreenKeyboardPosition, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetOnscreenKeyboardSize", PlatformWindowImpl__GetOnscreenKeyboardSize, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetPointerCursor", PlatformWindowImpl__GetPointerCursor, 0, true, ::app::Uno::Platform::PointerCursor__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetStatusBarPosition", PlatformWindowImpl__GetStatusBarPosition, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetStatusBarSize", PlatformWindowImpl__GetStatusBarSize, 0, true, ::app::Uno::Int2__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("GetTitle", PlatformWindowImpl__GetTitle, 0, true, ::app::Uno::String__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("HasOnscreenKeyboardSupport", PlatformWindowImpl__HasOnscreenKeyboardSupport, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("IsOnscreenKeyboardVisible", PlatformWindowImpl__IsOnscreenKeyboardVisible, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("IsStatusBarVisible", PlatformWindowImpl__IsStatusBarVisible, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunction("IsTextInputActive", PlatformWindowImpl__IsTextInputActive, 0, true, ::app::Uno::Bool__typeof(), ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof()),
        ::uNewFunctionVoid("OnSoftKeyboardWillResize", PlatformWindowImpl__OnSoftKeyboardWillResize, 0, true, ::uObject__typeof(), ::app::Uno::Platform::SystemUIWillResizeEventArgs__typeof()),
        ::uNewFunctionVoid("SetClientSize", PlatformWindowImpl__SetClientSize, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::Int2__typeof()),
        ::uNewFunctionVoid("SetFullscreen", PlatformWindowImpl__SetFullscreen, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::Bool__typeof()),
        ::uNewFunctionVoid("SetOnscreenKeyboardPosition", PlatformWindowImpl__SetOnscreenKeyboardPosition, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::Int2__typeof()),
        ::uNewFunctionVoid("SetPointerCursor", PlatformWindowImpl__SetPointerCursor, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::Platform::PointerCursor__typeof()),
        ::uNewFunctionVoid("SetTitle", PlatformWindowImpl__SetTitle, 0, true, ::app::Uno::Runtime::Implementation::PlatformWindowHandle__typeof(), ::app::Uno::String__typeof()));

    ::uRegisterType(type);
    return type;
}

void PlatformWindowImpl___TypeInit(::uStatic* __this)
{
    ::app::Uno::Platform::SystemUI__add_BottomFrameWillResize(NULL, ::uNewDelegateNonVirt(::app::Uno::EventHandler__Uno_Platform_SystemUIWillResizeEventArgs__typeof(), (const void*)PlatformWindowImpl__OnSoftKeyboardWillResize));
}

void PlatformWindowImpl__Close(::uStatic* __this, ::Xli::Window* handle_)
{
    handle_->Close();
}

::app::Uno::Int2 PlatformWindowImpl__GetClientSize(::uStatic* __this, ::Xli::Window* handle)
{
    {
        ::app::Uno::Float2 size = ::uPtr< ::app::Uno::Platform2::Display*>(::app::Uno::Platform2::Display__get_MainDisplay(NULL))->Frame().Size();
        return ::app::Uno::Int2__New_2(NULL, (int)size.X, (int)size.Y);
    }
}

float PlatformWindowImpl__GetDensity(::uStatic* __this, ::Xli::Window* handle)
{
    return ::uPtr< ::app::Uno::Platform2::Display*>(::app::Uno::Platform2::Display__get_MainDisplay(NULL))->Density();
}

bool PlatformWindowImpl__GetFullscreen(::uStatic* __this, ::Xli::Window* handle_)
{
    return handle_->IsFullscreen();
}

::Xli::Window* PlatformWindowImpl__GetInstance(::uStatic* __this)
{
    return uXliWindowPtr;
}

bool PlatformWindowImpl__GetKeyState(::uStatic* __this, ::Xli::Window* handle_, int key_)
{
    return handle_->GetKeyState((Xli::Key)key_);
}

bool PlatformWindowImpl__GetMouseButtonState(::uStatic* __this, ::Xli::Window* handle_, int button_)
{
    return handle_->GetMouseButtonState((Xli::MouseButton)button_);
}

::app::Uno::Int2 PlatformWindowImpl__GetOnscreenKeyboardPosition(::uStatic* __this, ::Xli::Window* handle)
{
    {
        return ::app::Uno::Int2__New_2(NULL, (int)PlatformWindowImpl__keyboardFrame.Position().X, (int)PlatformWindowImpl__keyboardFrame.Position().Y);
    }

    return ::app::Uno::Int2__New_2(NULL, 0, 0);
}

::app::Uno::Int2 PlatformWindowImpl__GetOnscreenKeyboardSize(::uStatic* __this, ::Xli::Window* handle)
{
    {
        return ::app::Uno::Int2__New_2(NULL, (int)PlatformWindowImpl__keyboardFrame.Size().X, (int)PlatformWindowImpl__keyboardFrame.Size().Y);
    }

    return ::app::Uno::Int2__New_2(NULL, 0, 0);
}

int PlatformWindowImpl__GetPointerCursor(::uStatic* __this, ::Xli::Window* handle_)
{
    return handle_->GetSystemCursor();
}

::app::Uno::Int2 PlatformWindowImpl__GetStatusBarPosition(::uStatic* __this, ::Xli::Window* handle)
{
    {
        ::app::Uno::Float2 position = ::app::Uno::Platform::SystemUI__get_TopFrame(NULL).Position();
        return ::app::Uno::Int2__New_2(NULL, (int)position.X, (int)position.Y);
    }

    return ::app::Uno::Int2__New_2(NULL, 0, 0);
}

::app::Uno::Int2 PlatformWindowImpl__GetStatusBarSize(::uStatic* __this, ::Xli::Window* handle)
{
    {
        ::app::Uno::Float2 size = ::app::Uno::Platform::SystemUI__get_TopFrame(NULL).Size();
        return ::app::Uno::Int2__New_2(NULL, (int)size.X, (int)size.Y);
    }

    return ::app::Uno::Int2__New_2(NULL, 0, 0);
}

::uString* PlatformWindowImpl__GetTitle(::uStatic* __this, ::Xli::Window* handle_)
{
    return ::uStringFromXliString(handle_->GetTitle());
}

bool PlatformWindowImpl__HasOnscreenKeyboardSupport(::uStatic* __this, ::Xli::Window* handle)
{
    return true;
}

bool PlatformWindowImpl__IsOnscreenKeyboardVisible(::uStatic* __this, ::Xli::Window* handle)
{
    {
        return PlatformWindowImpl__keyboardFrame.Size().Y > 0.0f;
    }

    return false;
}

bool PlatformWindowImpl__IsStatusBarVisible(::uStatic* __this, ::Xli::Window* handle)
{
    return ::app::Uno::Platform::SystemUI__get_IsTopFrameVisible(NULL);
    return false;
}

bool PlatformWindowImpl__IsTextInputActive(::uStatic* __this, ::Xli::Window* handle)
{
    return false;
}

void PlatformWindowImpl__OnSoftKeyboardWillResize(::uStatic* __this, ::uObject* sender, ::app::Uno::Platform::SystemUIWillResizeEventArgs* args)
{
    PlatformWindowImpl__keyboardVisible = ::uPtr< ::app::Uno::Platform::SystemUIWillResizeEventArgs*>(args)->ResizeReason() != 2;
    PlatformWindowImpl__keyboardFrame = args->EndFrame();
}

void PlatformWindowImpl__SetClientSize(::uStatic* __this, ::Xli::Window* handle_, ::app::Uno::Int2 clientSize_)
{
    handle_->SetClientSize(::uInt2ToXliVector2i(clientSize_));
}

void PlatformWindowImpl__SetFullscreen(::uStatic* __this, ::Xli::Window* handle_, bool fullscreen_)
{
    handle_->SetFullscreen(fullscreen_);
}

void PlatformWindowImpl__SetOnscreenKeyboardPosition(::uStatic* __this, ::Xli::Window* handle, ::app::Uno::Int2 position)
{
}

void PlatformWindowImpl__SetPointerCursor(::uStatic* __this, ::Xli::Window* handle_, int cursor_)
{
    handle_->SetSystemCursor((Xli::SystemCursor)cursor_);
}

void PlatformWindowImpl__SetTitle(::uStatic* __this, ::Xli::Window* handle_, ::uString* title_)
{
    handle_->SetTitle(::uStringToXliString(title_));
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

ProfileImpl__uType* ProfileImpl__typeof()
{
    static ::uStaticStrong<ProfileImpl__uType*> type;
    if (type != NULL) return type;

    type = (ProfileImpl__uType*)::uAllocClassType(sizeof(ProfileImpl__uType), "Uno.Runtime.Implementation.ProfileImpl");

    type->SetFunctions(1,
        ::uNewFunctionVoid("Write", ProfileImpl__Write, 0, true, ::app::Uno::String__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::Int__typeof(), ::app::Uno::Int__typeof()));

    ::uRegisterType(type);
    return type;
}

void ProfileImpl__Write(::uStatic* __this, ::uString* fileBaseName_, ::uArray* bytes_, int offset_, int count_)
{
    Xli::String dir = Xli::Disk->GetSystemDirectory(Xli::SystemDirectoryConfig);
    Xli::String baseName = uStringToXliString(fileBaseName_);
    Xli::String fileName = Xli::Path::Combine("/sdcard", baseName);
    Xli::File file(fileName, Xli::FileModeWrite);
    void* ptr = bytes_->Ptr();
    int byteCount = count_;
    file.Write(ptr, sizeof(unsigned char), byteCount);
    file.Close();
}

// This file was generated based on 'C:\ProgramData\Uno\Packages\UnoCore\0.13.2\Source\Uno\Runtime\Implementation\$.uno'.
// WARNING: Changes might be lost if you edit this file directly.

TextEncodingImpl__uType* TextEncodingImpl__typeof()
{
    static ::uStaticStrong<TextEncodingImpl__uType*> type;
    if (type != NULL) return type;

    type = (TextEncodingImpl__uType*)::uAllocClassType(sizeof(TextEncodingImpl__uType), "Uno.Runtime.Implementation.TextEncodingImpl");

    type->SetFunctions(8,
        ::uNewFunction("DecodeAscii", TextEncodingImpl__DecodeAscii, 0, true, ::app::Uno::String__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof())),
        ::uNewFunction("DecodeBase64", TextEncodingImpl__DecodeBase64, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::String__typeof()),
        ::uNewFunction("DecodeUri", TextEncodingImpl__DecodeUri, 0, true, ::app::Uno::String__typeof(), ::app::Uno::String__typeof()),
        ::uNewFunction("DecodeUtf8", TextEncodingImpl__DecodeUtf8, 0, true, ::app::Uno::String__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof())),
        ::uNewFunction("EncodeAscii", TextEncodingImpl__EncodeAscii, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::String__typeof()),
        ::uNewFunction("EncodeBase64", TextEncodingImpl__EncodeBase64, 0, true, ::app::Uno::String__typeof(), ::uGetArrayType(::app::Uno::Byte__typeof())),
        ::uNewFunction("EncodeUri", TextEncodingImpl__EncodeUri, 0, true, ::app::Uno::String__typeof(), ::app::Uno::String__typeof()),
        ::uNewFunction("EncodeUtf8", TextEncodingImpl__EncodeUtf8, 0, true, ::uGetArrayType(::app::Uno::Byte__typeof()), ::app::Uno::String__typeof()));

    ::uRegisterType(type);
    return type;
}

::uString* TextEncodingImpl__DecodeAscii(::uStatic* __this, ::uArray* value)
{
    if ((value == NULL) || (::uPtr< ::uArray*>(value)->Length() == 0))
    {
        return NULL;
    }

    ::uString* res = ::app::Uno::String__Empty;

    for (int i = 0; i < ::uPtr< ::uArray*>(value)->Length(); i++)
    {
        if ((int)::uPtr< ::uArray*>(value)->Item< ::uByte>(i) > 127)
        {
            res = ::app::Uno::String__op_Addition_1(NULL, res, ::uBox< ::uChar>(::app::Uno::Char__typeof(), '?'));
        }
        else
        {
            res = ::app::Uno::String__op_Addition_1(NULL, res, ::uBox< ::uChar>(::app::Uno::Char__typeof(), (::uChar)::uPtr< ::uArray*>(value)->Item< ::uByte>(i)));
        }
    }

    return ::uPtr< ::uString*>(res)->ToString();
}

::uArray* TextEncodingImpl__DecodeBase64(::uStatic* __this, ::uString* value)
{
    int addidionalSymbols = 0;
    ::app::Uno::Collections::List__byte* ret = ::app::Uno::Collections::List__byte__New_1(NULL);
    ::uArray* charArray3 = ::uNewArray(::app::Uno::Int__typeof(), 3);
    ::uArray* charArray4 = ::uNewArray(::app::Uno::Int__typeof(), 4);

    for (int position = 0; position < ::uPtr< ::uString*>(value)->Length(); position++)
    {
        if ((::uPtr< ::uString*>(value)->Item(position) == '=') || (::app::Uno::String::IndexOf(::uPtr< ::uString*>(::uGetConstString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")), ::uPtr< ::uString*>(value)->Item(position), 0) < 0))
        {
            break;
        }

        ::uPtr< ::uArray*>(charArray4)->Item< int>(addidionalSymbols) = (int)::uPtr< ::uString*>(value)->Item(position);
        addidionalSymbols++;

        if (addidionalSymbols == 4)
        {
            for (int j = 0; j < 4; j++)
            {
                ::uPtr< ::uArray*>(charArray4)->Item< int>(j) = ::app::Uno::String::IndexOf(::uPtr< ::uString*>(::uGetConstString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")), (::uChar)::uPtr< ::uArray*>(charArray4)->Item< int>(j), 0);
            }

            ::uPtr< ::uArray*>(charArray3)->Item< int>(0) = (::uPtr< ::uArray*>(charArray4)->Item< int>(0) << 2) + ((::uPtr< ::uArray*>(charArray4)->Item< int>(1) & 48) >> 4);
            charArray3->Item< int>(1) = ((charArray4->Item< int>(1) & 15) << 4) + ((charArray4->Item< int>(2) & 60) >> 2);
            charArray3->Item< int>(2) = ((charArray4->Item< int>(2) & 3) << 6) + charArray4->Item< int>(3);

            for (int j = 0; j < 3; j++)
            {
                ::uPtr< ::app::Uno::Collections::List__byte*>(ret)->Add((::uByte)::uPtr< ::uArray*>(charArray3)->Item< int>(j));
            }

            addidionalSymbols = 0;
        }
    }

    if (addidionalSymbols > 0)
    {
        for (int j = addidionalSymbols; j < 4; j++)
        {
            ::uPtr< ::uArray*>(charArray4)->Item< int>(j) = 0;
        }

        for (int j = 0; j < 4; j++)
        {
            ::uPtr< ::uArray*>(charArray4)->Item< int>(j) = ::app::Uno::String::IndexOf(::uPtr< ::uString*>(::uGetConstString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")), (::uChar)::uPtr< ::uArray*>(charArray4)->Item< int>(j), 0);
        }

        ::uPtr< ::uArray*>(charArray3)->Item< int>(0) = (::uPtr< ::uArray*>(charArray4)->Item< int>(0) << 2) + ((::uPtr< ::uArray*>(charArray4)->Item< int>(1) & 48) >> 4);
        charArray3->Item< int>(1) = ((charArray4->Item< int>(1) & 15) << 4) + ((charArray4->Item< int>(2) & 60) >> 2);
        charArray3->Item< int>(2) = ((charArray4->Item< int>(2) & 3) << 6) + charArray4->Item< int>(3);

        for (int j = 0; j < (addidionalSymbols - 1); j++)
        {
            ::uPtr< ::app::Uno::Collections::List__byte*>(ret)->Add((::uByte)::uPtr< ::uArray*>(charArray3)->Item< int>(j));
        }
    }

    return ::uPtr< ::app::Uno::Collections::List__byte*>(ret)->ToArray();
}

::uString* TextEncodingImpl__DecodeUri(::uStatic* __this, ::uString* value_)
{
    return value_;
}

::uString* TextEncodingImpl__DecodeUtf8(::uStatic* __this, ::uArray* value_)
{
    return ::uNewStringUtf8((const char*)::uPtr(value_)->Ptr(), ::uPtr(value_)->Length());
}

::uArray* TextEncodingImpl__EncodeAscii(::uStatic* __this, ::uString* value)
{
    if (::app::Uno::String__IsNullOrEmpty(NULL, value))
    {
        return NULL;
    }

    ::app::Uno::Collections::List__byte* res = ::app::Uno::Collections::List__byte__New_1(NULL);

    for (int i = 0; i < ::uPtr< ::uString*>(value)->Length(); i++)
    {
        if ((int)::uPtr< ::uString*>(value)->Item(i) > 127)
        {
            ::uPtr< ::app::Uno::Collections::List__byte*>(res)->Add(63);
        }
        else
        {
            res->Add((::uByte)::uPtr< ::uString*>(value)->Item(i));
        }
    }

    return ::uPtr< ::app::Uno::Collections::List__byte*>(res)->ToArray();
}

::uString* TextEncodingImpl__EncodeBase64(::uStatic* __this, ::uArray* value_)
{
    return ::uBase64Encode(value_);
}

::uString* TextEncodingImpl__EncodeUri(::uStatic* __this, ::uString* value_)
{
    return value_;
}

::uArray* TextEncodingImpl__EncodeUtf8(::uStatic* __this, ::uString* value_)
{
    Xli::String str(::uStringToXliString(value_));
    return ::uNewArray(::app::Uno::Byte__typeof(), str.Length(), str.Ptr());
}

}}}}
